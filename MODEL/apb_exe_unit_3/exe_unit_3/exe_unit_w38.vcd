$date
	Sun Dec 10 23:28:35 2023
$end
$version
	Icarus Verilog
$end
$timescale
	1ps
$end
$scope module testbench $end
$var wire 4 ! stat [3:0] $end
$var wire 8 " result [7:0] $end
$var reg 8 # i_argA [7:0] $end
$var reg 8 $ i_argB [7:0] $end
$var reg 1 % i_clk $end
$var reg 2 & i_op [1:0] $end
$var reg 1 ' i_reset $end
$scope module unit $end
$var wire 8 ( i_argA [7:0] $end
$var wire 8 ) i_argB [7:0] $end
$var wire 1 % i_clk $end
$var wire 2 * i_op [1:0] $end
$var wire 1 ' i_reset $end
$var wire 8 + s_out_shift [7:0] $end
$var wire 8 , s_out_set [7:0] $end
$var wire 8 - s_out_comparator [7:0] $end
$var wire 8 . s_out_changer [7:0] $end
$var wire 8 / s_oper_mux [7:0] $end
$var wire 1 0 s_ERROR_shift $end
$var wire 1 1 s_ERROR_set $end
$var wire 1 2 s_ERROR_change $end
$var wire 4 3 o_stat [3:0] $end
$var wire 8 4 o_result [7:0] $end
$var reg 4 5 possible_errors [3:0] $end
$var integer 32 6 counter [31:0] $end
$var integer 32 7 i [31:0] $end
$scope module MUX $end
$var wire 2 8 testcase [1:0] $end
$var wire 8 9 SHIFT [7:0] $end
$var wire 8 : SET [7:0] $end
$var wire 8 ; COMPARATOR [7:0] $end
$var wire 8 < CHANGER [7:0] $end
$var reg 8 = modul [7:0] $end
$upscope $end
$scope module changer $end
$var wire 8 > u2 [7:0] $end
$var reg 1 2 ERROR $end
$var reg 8 ? sm [7:0] $end
$upscope $end
$scope module comparator $end
$var wire 8 @ i_argA [7:0] $end
$var wire 8 A i_argB [7:0] $end
$var reg 8 B o_y [7:0] $end
$upscope $end
$scope module register $end
$var wire 1 % i_clk $end
$var wire 8 C i_in [7:0] $end
$var wire 1 ' i_reset $end
$var reg 8 D o_out [7:0] $end
$upscope $end
$scope module register_error $end
$var wire 1 % i_clk $end
$var wire 4 E i_in [3:0] $end
$var wire 1 ' i_reset $end
$var reg 4 F o_out [3:0] $end
$upscope $end
$scope module setter $end
$var wire 8 G i_argA [7:0] $end
$var wire 8 H i_argB [7:0] $end
$var reg 1 1 ERROR $end
$var reg 8 I o_y [7:0] $end
$upscope $end
$scope module shifter $end
$var wire 8 J i_argA [7:0] $end
$var wire 8 K i_argB [7:0] $end
$var reg 1 0 ERROR $end
$var reg 8 L o_y [7:0] $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
bx L
bx K
bx J
bx I
bx H
bx G
bx F
bx1 E
bx D
bx C
bx B
bx A
bx @
bx ?
bx >
bx =
bx <
bx ;
bx :
bx 9
b0 8
b1000 7
b0 6
bx1 5
bx 4
bx 3
x2
x1
x0
bx /
bx .
bx -
bx ,
bx +
b0 *
bx )
bx (
0'
b0 &
0%
bx $
bx #
bx "
bx !
$end
#1
bx01 5
bx01 E
b1000 7
b0 "
b0 4
b0 D
b0 !
b0 3
b0 F
1%
#2
bx01 !
bx01 3
bx01 F
bx "
bx 4
bx D
b111 /
b111 =
b111 C
b10x1 5
b10x1 E
b1000 7
02
b111 .
b111 <
b111 ?
b1 -
b1 ;
b1 B
b0 +
b0 9
b0 L
00
b111 ,
b111 :
b111 I
11
b11000001 $
b11000001 )
b11000001 A
b11000001 H
b11000001 K
b111 #
b111 (
b111 >
b111 @
b111 G
b111 J
1%
1'
#3
0%
#4
b1000 5
b1000 E
b11 6
b1000 7
b111 "
b111 4
b111 D
b10x1 !
b10x1 3
b10x1 F
1%
#5
0%
#6
b1000 !
b1000 3
b1000 F
b0 5
b0 E
b1000 7
b11 6
b0 -
b0 ;
b0 B
01
b111 +
b111 9
b111 L
1%
b0 $
b0 )
b0 A
b0 H
b0 K
#7
0%
#8
b0 !
b0 3
b0 F
1%
#9
0%
#10
b1000 5
b1000 E
b1000 7
b11 6
b1 -
b1 ;
b1 B
b0 +
b0 9
b0 L
11
1%
b1011 $
b1011 )
b1011 A
b1011 H
b1011 K
#11
0%
#12
b1000 !
b1000 3
b1000 F
1%
#13
0%
#14
b0 5
b0 E
b1000 7
b11 6
b10110001 /
b10110001 =
b10110001 C
b11010000 .
b11010000 <
b11010000 ?
b0 -
b0 ;
b0 B
b10110001 ,
b10110001 :
b10110001 I
01
b10110000 +
b10110000 9
b10110000 L
1%
b0 $
b0 )
b0 A
b0 H
b0 K
b10110000 #
b10110000 (
b10110000 >
b10110000 @
b10110000 G
b10110000 J
#15
0%
#16
b1 5
b1 E
b1000 7
b100 6
b10110001 "
b10110001 4
b10110001 D
b0 !
b0 3
b0 F
1%
#17
0%
#18
b1000 7
b0 6
b0 "
b0 4
b0 D
1%
0'
#19
0%
#20
1%
#21
0%
#22
1%
#23
0%
#24
1%
#25
0%
#26
1%
#27
0%
#28
b1001 5
b1001 E
b1000 7
b1000 .
b1000 <
b1000 ?
b1 -
b1 ;
b1 B
b0 +
b0 9
b0 L
b1000 ,
b1000 :
b1000 I
11
b0 /
b0 =
b0 C
1%
b10110000 $
b10110000 )
b10110000 A
b10110000 H
b10110000 K
b1000 #
b1000 (
b1000 >
b1000 @
b1000 G
b1000 J
b1 &
b1 *
b1 8
#29
0%
#30
1%
#31
0%
#32
b1 5
b1 E
b1000 7
b1100000 /
b1100000 =
b1100000 C
b10111101 .
b10111101 <
b10111101 ?
b0 -
b0 ;
b0 B
b11100011 ,
b11100011 :
b11100011 I
01
b1100000 +
b1100000 9
b1100000 L
1%
b101 $
b101 )
b101 A
b101 H
b101 K
b11000011 #
b11000011 (
b11000011 >
b11000011 @
b11000011 G
b11000011 J
#33
0%
#34
1%
#35
0%
#36
b0 /
b0 =
b0 C
b1000 .
b1000 <
b1000 ?
b0 +
b0 9
b0 L
b101000 ,
b101000 :
b101000 I
1%
b1000 #
b1000 (
b1000 >
b1000 @
b1000 G
b1000 J
#37
0%
#38
1%
#39
0%
#40
1%
#41
0%
#42
1%
#43
0%
#44
1%
#45
0%
#46
1%
#47
0%
#48
1%
#49
0%
#50
b1 /
b1 =
b1 C
b1001 5
b1001 E
b1000 7
b1011 .
b1011 <
b1011 ?
b1 -
b1 ;
b1 B
b1011 ,
b1011 :
b1011 I
11
1%
b1110 $
b1110 )
b1110 A
b1110 H
b1110 K
b1011 #
b1011 (
b1011 >
b1011 @
b1011 G
b1011 J
b10 &
b10 *
b10 8
#51
0%
#52
1%
#53
0%
#54
b0 /
b0 =
b0 C
b0 -
b0 ;
b0 B
1%
b1001 $
b1001 )
b1001 A
b1001 H
b1001 K
#55
0%
#56
1%
#57
0%
#58
b1 /
b1 =
b1 C
b1010 .
b1010 <
b1010 ?
b1 -
b1 ;
b1 B
b1010 ,
b1010 :
b1010 I
1%
b1010 $
b1010 )
b1010 A
b1010 H
b1010 K
b1010 #
b1010 (
b1010 >
b1010 @
b1010 G
b1010 J
#59
0%
#60
1%
#61
0%
#62
1%
#63
0%
#64
1%
#65
0%
#66
1%
#67
0%
#68
1%
#69
0%
#70
1%
#71
0%
#72
b11110111 .
b11110111 <
b11110111 ?
b0 -
b0 ;
b0 B
b10001001 ,
b10001001 :
b10001001 I
b11110111 /
b11110111 =
b11110111 C
1%
b10001001 #
b10001001 (
b10001001 >
b10001001 @
b10001001 G
b10001001 J
b11 &
b11 *
b11 8
#73
0%
#74
1%
#75
0%
#76
b1111000 /
b1111000 =
b1111000 C
b1111000 .
b1111000 <
b1111000 ?
b1111000 ,
b1111000 :
b1111000 I
1%
b1111000 #
b1111000 (
b1111000 >
b1111000 @
b1111000 G
b1111000 J
#77
0%
#78
1%
#79
0%
#80
b1101 5
b1101 E
b1000 7
b0 /
b0 =
b0 C
12
b0 .
b0 <
b0 ?
b10000000 ,
b10000000 :
b10000000 I
1%
b10000000 #
b10000000 (
b10000000 >
b10000000 @
b10000000 G
b10000000 J
#81
0%
#82
1%
#83
0%
#84
1%
#85
0%
#86
1%
#87
0%
#88
1%
#89
0%
#90
1%
#91
0%
#92
1%
#93
0%
#94
1%

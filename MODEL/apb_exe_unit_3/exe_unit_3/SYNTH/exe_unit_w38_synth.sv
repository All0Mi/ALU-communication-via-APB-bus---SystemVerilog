/* Generated by Yosys 0.9 (git sha1 1979e0b) */

module \$paramod\MUX\M=8 (SET, SHIFT, COMPARATOR, CHANGER, testcase, modul);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  wire _11_;
  wire _12_;
  wire _13_;
  wire _14_;
  wire _15_;
  wire _16_;
  wire _17_;
  wire _18_;
  wire _19_;
  wire _20_;
  wire _21_;
  wire _22_;
  wire _23_;
  wire _24_;
  wire _25_;
  wire _26_;
  wire _27_;
  input [7:0] CHANGER;
  input [7:0] COMPARATOR;
  input [7:0] SET;
  input [7:0] SHIFT;
  output [7:0] modul;
  input [1:0] testcase;
  assign _00_ = ~(testcase[0] | testcase[1]);
  assign _01_ = testcase[0] & testcase[1];
  assign _02_ = testcase[1] & ~(testcase[0]);
  assign _03_ = ~((_02_ & COMPARATOR[0]) | (_01_ & CHANGER[0]));
  assign _04_ = testcase[1] | ~(testcase[0]);
  assign _05_ = SHIFT[0] & ~(_04_);
  assign _06_ = _05_ | ~(_03_);
  assign modul[0] = _00_ ? SET[0] : _06_;
  assign _07_ = ~((_02_ & COMPARATOR[1]) | (_01_ & CHANGER[1]));
  assign _08_ = SHIFT[1] & ~(_04_);
  assign _09_ = _08_ | ~(_07_);
  assign modul[1] = _00_ ? SET[1] : _09_;
  assign _10_ = ~((_02_ & COMPARATOR[2]) | (_01_ & CHANGER[2]));
  assign _11_ = SHIFT[2] & ~(_04_);
  assign _12_ = _11_ | ~(_10_);
  assign modul[2] = _00_ ? SET[2] : _12_;
  assign _13_ = ~((_02_ & COMPARATOR[3]) | (_01_ & CHANGER[3]));
  assign _14_ = SHIFT[3] & ~(_04_);
  assign _15_ = _14_ | ~(_13_);
  assign modul[3] = _00_ ? SET[3] : _15_;
  assign _16_ = ~((_02_ & COMPARATOR[4]) | (_01_ & CHANGER[4]));
  assign _17_ = SHIFT[4] & ~(_04_);
  assign _18_ = _17_ | ~(_16_);
  assign modul[4] = _00_ ? SET[4] : _18_;
  assign _19_ = ~((_02_ & COMPARATOR[5]) | (_01_ & CHANGER[5]));
  assign _20_ = SHIFT[5] & ~(_04_);
  assign _21_ = _20_ | ~(_19_);
  assign modul[5] = _00_ ? SET[5] : _21_;
  assign _22_ = ~((_02_ & COMPARATOR[6]) | (_01_ & CHANGER[6]));
  assign _23_ = SHIFT[6] & ~(_04_);
  assign _24_ = _23_ | ~(_22_);
  assign modul[6] = _00_ ? SET[6] : _24_;
  assign _25_ = ~((_02_ & COMPARATOR[7]) | (_01_ & CHANGER[7]));
  assign _26_ = SHIFT[7] & ~(_04_);
  assign _27_ = _26_ | ~(_25_);
  assign modul[7] = _00_ ? SET[7] : _27_;
endmodule

module \$paramod\bit_set\M=8 (i_argA, i_argB, ERROR, o_y);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  wire _11_;
  wire _12_;
  wire _13_;
  wire _14_;
  wire _15_;
  wire _16_;
  wire _17_;
  wire _18_;
  wire _19_;
  wire _20_;
  wire _21_;
  wire _22_;
  wire _23_;
  wire _24_;
  wire _25_;
  wire _26_;
  wire _27_;
  wire _28_;
  wire _29_;
  wire _30_;
  wire _31_;
  wire _32_;
  wire _33_;
  wire _34_;
  wire _35_;
  output ERROR;
  input [7:0] i_argA;
  input [7:0] i_argB;
  output [7:0] o_y;
  assign _00_ = i_argB[7] | i_argB[6];
  assign _01_ = i_argB[5] | i_argB[4];
  assign _02_ = _01_ | _00_;
  assign _03_ = i_argB[1] | i_argB[0];
  assign _04_ = i_argB[2] | ~(i_argB[3]);
  assign _05_ = _04_ | _03_;
  assign _06_ = ~((_05_ & i_argB[3]) | _02_);
  assign ERROR = ~((_05_ | _02_) & _06_);
  assign _07_ = ~i_argA[0];
  assign _08_ = i_argB[3] | i_argB[2];
  assign _09_ = _08_ | _03_;
  assign _10_ = _09_ | _02_;
  assign o_y[0] = ~((_10_ | ERROR) & _07_);
  assign _11_ = ~i_argA[1];
  assign _12_ = i_argB[1] | ~(i_argB[0]);
  assign _13_ = _12_ | _08_;
  assign _14_ = _13_ | _02_;
  assign o_y[1] = ~((_14_ | ERROR) & _11_);
  assign _15_ = ~i_argA[2];
  assign _16_ = i_argB[0] | ~(i_argB[1]);
  assign _17_ = _16_ | _08_;
  assign _18_ = _17_ | _02_;
  assign o_y[2] = ~((_18_ | ERROR) & _15_);
  assign _19_ = ~i_argA[3];
  assign _20_ = ~(i_argB[1] & i_argB[0]);
  assign _21_ = _20_ | _08_;
  assign _22_ = _21_ | _02_;
  assign o_y[3] = ~((_22_ | ERROR) & _19_);
  assign _23_ = ~i_argA[4];
  assign _24_ = i_argB[3] | ~(i_argB[2]);
  assign _25_ = _24_ | _03_;
  assign _26_ = _25_ | _02_;
  assign o_y[4] = ~((_26_ | ERROR) & _23_);
  assign _27_ = ~i_argA[5];
  assign _28_ = _24_ | _12_;
  assign _29_ = _28_ | _02_;
  assign o_y[5] = ~((_29_ | ERROR) & _27_);
  assign _30_ = ~i_argA[6];
  assign _31_ = _24_ | _16_;
  assign _32_ = _31_ | _02_;
  assign o_y[6] = ~((_32_ | ERROR) & _30_);
  assign _33_ = ~i_argA[7];
  assign _34_ = _24_ | _20_;
  assign _35_ = _34_ | _02_;
  assign o_y[7] = ~((_35_ | ERROR) & _33_);
endmodule

module \$paramod\bit_shift\M=8 (i_argA, i_argB, o_y, ERROR);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  wire _11_;
  wire _12_;
  wire _13_;
  wire _14_;
  wire _15_;
  wire _16_;
  wire _17_;
  wire _18_;
  wire _19_;
  wire _20_;
  wire _21_;
  wire _22_;
  wire _23_;
  wire _24_;
  wire _25_;
  wire _26_;
  wire _27_;
  wire _28_;
  wire _29_;
  wire _30_;
  wire _31_;
  wire _32_;
  wire _33_;
  wire _34_;
  wire _35_;
  output ERROR;
  input [7:0] i_argA;
  input [7:0] i_argB;
  output [7:0] o_y;
  assign _00_ = ~i_argB[3];
  assign _01_ = i_argB[5] | i_argB[4];
  assign _02_ = i_argB[7] | i_argB[6];
  assign _03_ = _02_ | _01_;
  assign _04_ = _03_ | ~(i_argA[0]);
  assign _05_ = _04_ | i_argB[0];
  assign _06_ = _05_ | i_argB[1];
  assign _07_ = _06_ | i_argB[2];
  assign o_y[0] = _00_ & ~(_07_);
  assign _08_ = _03_ | ~(i_argA[1]);
  assign _09_ = i_argB[0] ? _04_ : _08_;
  assign _10_ = _09_ | i_argB[1];
  assign _11_ = _10_ | i_argB[2];
  assign o_y[1] = _00_ & ~(_11_);
  assign _12_ = _03_ | ~(i_argA[2]);
  assign _13_ = i_argB[0] ? _08_ : _12_;
  assign _14_ = i_argB[1] ? _05_ : _13_;
  assign _15_ = _14_ | i_argB[2];
  assign o_y[2] = _00_ & ~(_15_);
  assign _16_ = _03_ | ~(i_argA[3]);
  assign _17_ = i_argB[0] ? _12_ : _16_;
  assign _18_ = i_argB[1] ? _09_ : _17_;
  assign _19_ = _18_ | i_argB[2];
  assign o_y[3] = _00_ & ~(_19_);
  assign _20_ = _03_ | ~(i_argA[4]);
  assign _21_ = i_argB[0] ? _16_ : _20_;
  assign _22_ = i_argB[1] ? _13_ : _21_;
  assign _23_ = i_argB[2] ? _06_ : _22_;
  assign o_y[4] = _00_ & ~(_23_);
  assign _24_ = _03_ | ~(i_argA[5]);
  assign _25_ = i_argB[0] ? _20_ : _24_;
  assign _26_ = i_argB[1] ? _17_ : _25_;
  assign _27_ = i_argB[2] ? _10_ : _26_;
  assign o_y[5] = _00_ & ~(_27_);
  assign _28_ = _03_ | ~(i_argA[6]);
  assign _29_ = i_argB[0] ? _24_ : _28_;
  assign _30_ = i_argB[1] ? _21_ : _29_;
  assign _31_ = i_argB[2] ? _14_ : _30_;
  assign o_y[6] = _00_ & ~(_31_);
  assign _32_ = _03_ | ~(i_argA[7]);
  assign _33_ = i_argB[0] ? _28_ : _32_;
  assign _34_ = i_argB[1] ? _25_ : _33_;
  assign _35_ = i_argB[2] ? _18_ : _34_;
  assign o_y[7] = _00_ & ~(_35_);
  assign ERROR = 1'h0;
endmodule

module \$paramod\comparator\M=8 (i_argA, i_argB, o_y);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  wire _11_;
  wire _12_;
  wire _13_;
  wire _14_;
  wire _15_;
  wire _16_;
  wire _17_;
  wire _18_;
  wire _19_;
  wire _20_;
  wire _21_;
  wire _22_;
  wire _23_;
  wire _24_;
  input [7:0] i_argA;
  input [7:0] i_argB;
  output [7:0] o_y;
  assign _00_ = i_argA[7] | ~(i_argB[7]);
  assign _01_ = i_argB[7] ^ i_argA[7];
  assign _02_ = i_argA[6] | ~(i_argB[6]);
  assign _03_ = ~((_02_ | _01_) & _00_);
  assign _04_ = i_argB[6] ^ i_argA[6];
  assign _05_ = ~(_04_ | _01_);
  assign _06_ = i_argA[5] | ~(i_argB[5]);
  assign _07_ = i_argB[5] ^ i_argA[5];
  assign _08_ = i_argA[4] | ~(i_argB[4]);
  assign _09_ = ~((_08_ | _07_) & _06_);
  assign _10_ = ~((_09_ & _05_) | _03_);
  assign _11_ = i_argB[4] ^ i_argA[4];
  assign _12_ = ~(_11_ | _07_);
  assign _13_ = ~(_12_ & _05_);
  assign _14_ = i_argA[3] | ~(i_argB[3]);
  assign _15_ = i_argB[3] ^ i_argA[3];
  assign _16_ = i_argA[2] | ~(i_argB[2]);
  assign _17_ = ~((_16_ | _15_) & _14_);
  assign _18_ = ~(i_argB[2] ^ i_argA[2]);
  assign _19_ = _18_ & ~(_15_);
  assign _20_ = i_argA[1] | ~(i_argB[1]);
  assign _21_ = i_argB[1] ^ i_argA[1];
  assign _22_ = i_argA[0] & ~(i_argB[0]);
  assign _23_ = ~((_22_ | _21_) & _20_);
  assign _24_ = ~((_23_ & _19_) | _17_);
  assign o_y[0] = ~((_24_ | _13_) & _10_);
  assign o_y[7:1] = 7'h00;
endmodule

module \$paramod\regg\M=4 (i_clk, i_reset, i_in, o_out);
  wire [3:0] _0_;
  input i_clk;
  input [3:0] i_in;
  input i_reset;
  output [3:0] o_out;
  reg [3:0] o_out;
  assign _0_[0] = i_reset & i_in[0];
  assign _0_[1] = i_in[1] & i_reset;
  assign _0_[2] = i_in[2] & i_reset;
  assign _0_[3] = i_in[3] & i_reset;
  always @(posedge i_clk)
      o_out[0] <= _0_[0];
  always @(posedge i_clk)
      o_out[1] <= _0_[1];
  always @(posedge i_clk)
      o_out[2] <= _0_[2];
  always @(posedge i_clk)
      o_out[3] <= _0_[3];
endmodule

module \$paramod\regg\M=8 (i_clk, i_reset, i_in, o_out);
  wire [7:0] _00_;
  input i_clk;
  input [7:0] i_in;
  input i_reset;
  output [7:0] o_out;
  reg [7:0] o_out;
  assign _00_[0] = i_reset & i_in[0];
  assign _00_[1] = i_in[1] & i_reset;
  assign _00_[2] = i_in[2] & i_reset;
  assign _00_[3] = i_in[3] & i_reset;
  assign _00_[4] = i_in[4] & i_reset;
  assign _00_[5] = i_in[5] & i_reset;
  assign _00_[6] = i_in[6] & i_reset;
  assign _00_[7] = i_in[7] & i_reset;
  always @(posedge i_clk)
      o_out[0] <= _00_[0];
  always @(posedge i_clk)
      o_out[1] <= _00_[1];
  always @(posedge i_clk)
      o_out[2] <= _00_[2];
  always @(posedge i_clk)
      o_out[3] <= _00_[3];
  always @(posedge i_clk)
      o_out[4] <= _00_[4];
  always @(posedge i_clk)
      o_out[5] <= _00_[5];
  always @(posedge i_clk)
      o_out[6] <= _00_[6];
  always @(posedge i_clk)
      o_out[7] <= _00_[7];
endmodule

module \$paramod\u2_to_sm\M=8 (u2, sm, ERROR);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  wire _11_;
  wire _12_;
  wire _13_;
  wire _14_;
  wire _15_;
  wire _16_;
  output ERROR;
  output [7:0] sm;
  input [7:0] u2;
  assign _00_ = u2[0] & ~(u2[7]);
  assign _01_ = u2[7] & u2[0];
  assign sm[0] = _01_ | _00_;
  assign _02_ = ~u2[7];
  assign _03_ = u2[1] ^ u2[0];
  assign sm[1] = u2[7] ? _03_ : u2[1];
  assign _04_ = u2[1] | u2[0];
  assign _05_ = _04_ ^ u2[2];
  assign sm[2] = u2[7] ? _05_ : u2[2];
  assign _06_ = _04_ | u2[2];
  assign _07_ = _06_ ^ u2[3];
  assign sm[3] = u2[7] ? _07_ : u2[3];
  assign _08_ = u2[3] | u2[2];
  assign _09_ = _08_ | _04_;
  assign _10_ = _09_ ^ u2[4];
  assign sm[4] = u2[7] ? _10_ : u2[4];
  assign _11_ = _09_ | u2[4];
  assign _12_ = _11_ ^ u2[5];
  assign sm[5] = u2[7] ? _12_ : u2[5];
  assign _13_ = u2[5] | u2[4];
  assign _14_ = _13_ | _09_;
  assign _15_ = _14_ ^ u2[6];
  assign sm[6] = u2[7] ? _15_ : u2[6];
  assign _16_ = _14_ | u2[6];
  assign sm[7] = _16_ & ~(_02_);
  assign ERROR = u2[7] & ~(_16_);
endmodule

module exe_unit_w38_synth(i_op, i_argA, i_argB, i_clk, i_reset, o_result, o_stat);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  wire _11_;
  wire [31:0] counter;
  wire [31:0] i;
  input [7:0] i_argA;
  input [7:0] i_argB;
  input i_clk;
  input [1:0] i_op;
  input i_reset;
  output [7:0] o_result;
  output [3:0] o_stat;
  wire [3:0] possible_errors;
  wire s_ERROR_change;
  wire s_ERROR_set;
  wire s_ERROR_shift;
  wire [7:0] s_oper_mux;
  wire [7:0] s_out_changer;
  wire [7:0] s_out_comparator;
  wire [7:0] s_out_set;
  wire [7:0] s_out_shift;
  assign _00_ = o_result[6] & o_result[7];
  assign _01_ = ~(o_result[4] & o_result[5]);
  assign _02_ = _00_ & ~(_01_);
  assign _03_ = ~(o_result[2] & o_result[3]);
  assign _04_ = ~(o_result[0] & o_result[1]);
  assign _05_ = _04_ | _03_;
  assign possible_errors[1] = _02_ & ~(_05_);
  assign _06_ = ~(o_result[0] ^ o_result[1]);
  assign _07_ = _06_ ^ o_result[2];
  assign _08_ = _07_ ^ o_result[3];
  assign _09_ = _08_ ^ o_result[4];
  assign _10_ = _09_ ^ o_result[5];
  assign _11_ = _10_ ^ o_result[6];
  assign possible_errors[0] = _11_ ^ o_result[7];
  assign possible_errors[3] = s_ERROR_shift | s_ERROR_set;
  \$paramod\MUX\M=8  MUX (
    .CHANGER(s_out_changer),
    .COMPARATOR(s_out_comparator),
    .SET(s_out_set),
    .SHIFT(s_out_shift),
    .modul(s_oper_mux),
    .testcase(i_op)
  );
  \$paramod\u2_to_sm\M=8  changer (
    .ERROR(s_ERROR_change),
    .sm(s_out_changer),
    .u2(i_argA)
  );
  \$paramod\comparator\M=8  comparator (
    .i_argA(i_argA),
    .i_argB(i_argB),
    .o_y(s_out_comparator)
  );
  \$paramod\regg\M=8  register (
    .i_clk(i_clk),
    .i_in(s_oper_mux),
    .i_reset(i_reset),
    .o_out(o_result)
  );
  \$paramod\regg\M=4  register_error (
    .i_clk(i_clk),
    .i_in({ possible_errors[3], s_ERROR_change, possible_errors[1:0] }),
    .i_reset(i_reset),
    .o_out(o_stat)
  );
  \$paramod\bit_set\M=8  setter (
    .ERROR(s_ERROR_set),
    .i_argA(i_argA),
    .i_argB(i_argB),
    .o_y(s_out_set)
  );
  \$paramod\bit_shift\M=8  shifter (
    .ERROR(s_ERROR_shift),
    .i_argA(i_argA),
    .i_argB(i_argB),
    .o_y(s_out_shift)
  );
  assign counter[31:8] = 24'h000000;
  assign i = 32'd8;
  assign possible_errors[2] = s_ERROR_change;
endmodule

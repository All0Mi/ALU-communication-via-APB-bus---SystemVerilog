
 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2019  Clifford Wolf <clifford@clifford.at>           |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.9 (git sha1 1979e0b)


-- Executing script file `run.ys' --

1. Executing Verilog-2005 frontend: ./modules/exe_unit_w26.sv
Parsing SystemVerilog input from `./modules/exe_unit_w26.sv' to AST representation.
Generating RTLIL representation for module `\register'.
Generating RTLIL representation for module `\u2_to_sm'.
Generating RTLIL representation for module `\mux_4to1'.
Generating RTLIL representation for module `\left_shift'.
Generating RTLIL representation for module `\compare'.
Generating RTLIL representation for module `\bit_change'.
Generating RTLIL representation for module `\exe_unit_w26'.
Successfully finished Verilog frontend.

2. Executing SYNTH pass.

2.1. Executing HIERARCHY pass (managing design hierarchy).

2.1.1. Executing AST frontend in derive mode using pre-parsed AST for module `\register'.
Parameter 1 (\N) = 4
Generating RTLIL representation for module `$paramod\register\N=4'.

2.1.2. Executing AST frontend in derive mode using pre-parsed AST for module `\register'.
Parameter 1 (\N) = 8
Generating RTLIL representation for module `$paramod\register\N=8'.

2.1.3. Executing AST frontend in derive mode using pre-parsed AST for module `\mux_4to1'.
Parameter 1 (\N) = 8
Generating RTLIL representation for module `$paramod\mux_4to1\N=8'.

2.1.4. Executing AST frontend in derive mode using pre-parsed AST for module `\compare'.
Parameter 1 (\N) = 8
Generating RTLIL representation for module `$paramod\compare\N=8'.

2.1.5. Executing AST frontend in derive mode using pre-parsed AST for module `\bit_change'.
Parameter 1 (\N) = 8
Generating RTLIL representation for module `$paramod\bit_change\N=8'.

2.1.6. Executing AST frontend in derive mode using pre-parsed AST for module `\left_shift'.
Parameter 1 (\N) = 8
Generating RTLIL representation for module `$paramod\left_shift\N=8'.

2.1.7. Executing AST frontend in derive mode using pre-parsed AST for module `\u2_to_sm'.
Parameter 1 (\N) = 8
Generating RTLIL representation for module `$paramod\u2_to_sm\N=8'.

2.2. Executing PROC pass (convert processes to netlists).

2.2.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

2.2.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Marked 1 switch rules as full_case in process $proc$./modules/u2_to_sm.sv:8$65 in module $paramod\u2_to_sm\N=8.
Marked 1 switch rules as full_case in process $proc$./modules/left_shift.sv:11$62 in module $paramod\left_shift\N=8.
Marked 1 switch rules as full_case in process $proc$./modules/bit_change.sv:8$56 in module $paramod\bit_change\N=8.
Marked 1 switch rules as full_case in process $proc$./modules/compare.sv:7$54 in module $paramod\compare\N=8.
Removed 1 dead cases from process $proc$./modules/mux_4to1.sv:10$53 in module $paramod\mux_4to1\N=8.
Marked 1 switch rules as full_case in process $proc$./modules/mux_4to1.sv:10$53 in module $paramod\mux_4to1\N=8.
Marked 1 switch rules as full_case in process $proc$./modules/register.sv:8$51 in module $paramod\register\N=8.
Marked 1 switch rules as full_case in process $proc$./modules/register.sv:8$49 in module $paramod\register\N=4.
Marked 8 switch rules as full_case in process $proc$./modules/exe_unit_w26.sv:76$28 in module exe_unit_w26.
Marked 1 switch rules as full_case in process $proc$./modules/bit_change.sv:8$14 in module bit_change.
Marked 1 switch rules as full_case in process $proc$./modules/compare.sv:7$12 in module compare.
Marked 1 switch rules as full_case in process $proc$./modules/left_shift.sv:11$9 in module left_shift.
Removed 1 dead cases from process $proc$./modules/mux_4to1.sv:10$8 in module mux_4to1.
Marked 1 switch rules as full_case in process $proc$./modules/mux_4to1.sv:10$8 in module mux_4to1.
Marked 1 switch rules as full_case in process $proc$./modules/u2_to_sm.sv:8$3 in module u2_to_sm.
Marked 1 switch rules as full_case in process $proc$./modules/register.sv:8$1 in module register.
Removed a total of 2 dead cases.

2.2.3. Executing PROC_INIT pass (extract init attributes).

2.2.4. Executing PROC_ARST pass (detect async resets in processes).

2.2.5. Executing PROC_MUX pass (convert decision trees to multiplexers).
Creating decoders for process `$paramod\u2_to_sm\N=8.$proc$./modules/u2_to_sm.sv:8$65'.
     1/4: $1\error[0:0]
     2/4: $1\sm_number[7:0]
     3/4: $0\error[0:0]
     4/4: $0\sm_number[7:0]
Creating decoders for process `$paramod\left_shift\N=8.$proc$./modules/left_shift.sv:11$62'.
     1/6: $1\error[0:0]
     2/6: $1\shifted_A[7:0]
     3/6: $1\result[7:0]
     4/6: $0\shifted_A[7:0]
     5/6: $0\result[7:0]
     6/6: $0\error[0:0]
Creating decoders for process `$paramod\bit_change\N=8.$proc$./modules/bit_change.sv:8$56'.
     1/4: $1\result[7:0]
     2/4: $1\error[0:0]
     3/4: $0\result[7:0]
     4/4: $0\error[0:0]
Creating decoders for process `$paramod\compare\N=8.$proc$./modules/compare.sv:7$54'.
     1/2: $1\result[7:0]
     2/2: $0\result[7:0]
Creating decoders for process `$paramod\mux_4to1\N=8.$proc$./modules/mux_4to1.sv:10$53'.
     1/2: $1\out[7:0]
     2/2: $0\out[7:0]
Creating decoders for process `$paramod\register\N=8.$proc$./modules/register.sv:8$51'.
     1/1: $0\out[7:0]
Creating decoders for process `$paramod\register\N=4.$proc$./modules/register.sv:8$49'.
     1/1: $0\out[3:0]
Creating decoders for process `\exe_unit_w26.$proc$./modules/exe_unit_w26.sv:76$28'.
     1/14: $8\count[31:0]
     2/14: $7\count[31:0]
     3/14: $6\count[31:0]
     4/14: $5\count[31:0]
     5/14: $4\count[31:0]
     6/14: $3\count[31:0]
     7/14: $2\count[31:0]
     8/14: $1\count[31:0]
     9/14: $0\info[3:0] [3]
    10/14: $0\info[3:0] [2]
    11/14: $0\info[3:0] [1]
    12/14: $0\info[3:0] [0]
    13/14: $0\i[31:0]
    14/14: $0\count[31:0]
Creating decoders for process `\bit_change.$proc$./modules/bit_change.sv:8$14'.
     1/4: $1\result[7:0]
     2/4: $1\error[0:0]
     3/4: $0\result[7:0]
     4/4: $0\error[0:0]
Creating decoders for process `\compare.$proc$./modules/compare.sv:7$12'.
     1/2: $1\result[7:0]
     2/2: $0\result[7:0]
Creating decoders for process `\left_shift.$proc$./modules/left_shift.sv:11$9'.
     1/6: $1\error[0:0]
     2/6: $1\shifted_A[7:0]
     3/6: $1\result[7:0]
     4/6: $0\shifted_A[7:0]
     5/6: $0\result[7:0]
     6/6: $0\error[0:0]
Creating decoders for process `\mux_4to1.$proc$./modules/mux_4to1.sv:10$8'.
     1/2: $1\out[7:0]
     2/2: $0\out[7:0]
Creating decoders for process `\u2_to_sm.$proc$./modules/u2_to_sm.sv:8$3'.
     1/4: $1\error[0:0]
     2/4: $1\sm_number[7:0]
     3/4: $0\error[0:0]
     4/4: $0\sm_number[7:0]
Creating decoders for process `\register.$proc$./modules/register.sv:8$1'.
     1/1: $0\out[7:0]

2.2.6. Executing PROC_DLATCH pass (convert process syncs to latches).
No latch inferred for signal `$paramod\u2_to_sm\N=8.\sm_number' from process `$paramod\u2_to_sm\N=8.$proc$./modules/u2_to_sm.sv:8$65'.
No latch inferred for signal `$paramod\u2_to_sm\N=8.\error' from process `$paramod\u2_to_sm\N=8.$proc$./modules/u2_to_sm.sv:8$65'.
No latch inferred for signal `$paramod\left_shift\N=8.\error' from process `$paramod\left_shift\N=8.$proc$./modules/left_shift.sv:11$62'.
No latch inferred for signal `$paramod\left_shift\N=8.\result' from process `$paramod\left_shift\N=8.$proc$./modules/left_shift.sv:11$62'.
Latch inferred for signal `$paramod\left_shift\N=8.\shifted_A' from process `$paramod\left_shift\N=8.$proc$./modules/left_shift.sv:11$62': $auto$proc_dlatch.cc:409:proc_dlatch$169
No latch inferred for signal `$paramod\bit_change\N=8.\error' from process `$paramod\bit_change\N=8.$proc$./modules/bit_change.sv:8$56'.
No latch inferred for signal `$paramod\bit_change\N=8.\result' from process `$paramod\bit_change\N=8.$proc$./modules/bit_change.sv:8$56'.
No latch inferred for signal `$paramod\compare\N=8.\result' from process `$paramod\compare\N=8.$proc$./modules/compare.sv:7$54'.
No latch inferred for signal `$paramod\mux_4to1\N=8.\out' from process `$paramod\mux_4to1\N=8.$proc$./modules/mux_4to1.sv:10$53'.
No latch inferred for signal `\exe_unit_w26.\info' from process `\exe_unit_w26.$proc$./modules/exe_unit_w26.sv:76$28'.
No latch inferred for signal `\exe_unit_w26.\count' from process `\exe_unit_w26.$proc$./modules/exe_unit_w26.sv:76$28'.
No latch inferred for signal `\exe_unit_w26.\i' from process `\exe_unit_w26.$proc$./modules/exe_unit_w26.sv:76$28'.
No latch inferred for signal `\bit_change.\error' from process `\bit_change.$proc$./modules/bit_change.sv:8$14'.
No latch inferred for signal `\bit_change.\result' from process `\bit_change.$proc$./modules/bit_change.sv:8$14'.
No latch inferred for signal `\compare.\result' from process `\compare.$proc$./modules/compare.sv:7$12'.
No latch inferred for signal `\left_shift.\error' from process `\left_shift.$proc$./modules/left_shift.sv:11$9'.
No latch inferred for signal `\left_shift.\result' from process `\left_shift.$proc$./modules/left_shift.sv:11$9'.
Latch inferred for signal `\left_shift.\shifted_A' from process `\left_shift.$proc$./modules/left_shift.sv:11$9': $auto$proc_dlatch.cc:409:proc_dlatch$178
No latch inferred for signal `\mux_4to1.\out' from process `\mux_4to1.$proc$./modules/mux_4to1.sv:10$8'.
No latch inferred for signal `\u2_to_sm.\sm_number' from process `\u2_to_sm.$proc$./modules/u2_to_sm.sv:8$3'.
No latch inferred for signal `\u2_to_sm.\error' from process `\u2_to_sm.$proc$./modules/u2_to_sm.sv:8$3'.

2.2.7. Executing PROC_DFF pass (convert process syncs to FFs).
Creating register for signal `$paramod\register\N=8.\out' using process `$paramod\register\N=8.$proc$./modules/register.sv:8$51'.
  created $dff cell `$procdff$179' with positive edge clock.
Creating register for signal `$paramod\register\N=4.\out' using process `$paramod\register\N=4.$proc$./modules/register.sv:8$49'.
  created $dff cell `$procdff$180' with positive edge clock.
Creating register for signal `\register.\out' using process `\register.$proc$./modules/register.sv:8$1'.
  created $dff cell `$procdff$181' with positive edge clock.

2.2.8. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Found and cleaned up 1 empty switch in `$paramod\u2_to_sm\N=8.$proc$./modules/u2_to_sm.sv:8$65'.
Removing empty process `$paramod\u2_to_sm\N=8.$proc$./modules/u2_to_sm.sv:8$65'.
Found and cleaned up 1 empty switch in `$paramod\left_shift\N=8.$proc$./modules/left_shift.sv:11$62'.
Removing empty process `$paramod\left_shift\N=8.$proc$./modules/left_shift.sv:11$62'.
Found and cleaned up 1 empty switch in `$paramod\bit_change\N=8.$proc$./modules/bit_change.sv:8$56'.
Removing empty process `$paramod\bit_change\N=8.$proc$./modules/bit_change.sv:8$56'.
Found and cleaned up 1 empty switch in `$paramod\compare\N=8.$proc$./modules/compare.sv:7$54'.
Removing empty process `$paramod\compare\N=8.$proc$./modules/compare.sv:7$54'.
Found and cleaned up 1 empty switch in `$paramod\mux_4to1\N=8.$proc$./modules/mux_4to1.sv:10$53'.
Removing empty process `$paramod\mux_4to1\N=8.$proc$./modules/mux_4to1.sv:10$53'.
Found and cleaned up 1 empty switch in `$paramod\register\N=8.$proc$./modules/register.sv:8$51'.
Removing empty process `$paramod\register\N=8.$proc$./modules/register.sv:8$51'.
Found and cleaned up 1 empty switch in `$paramod\register\N=4.$proc$./modules/register.sv:8$49'.
Removing empty process `$paramod\register\N=4.$proc$./modules/register.sv:8$49'.
Found and cleaned up 8 empty switches in `\exe_unit_w26.$proc$./modules/exe_unit_w26.sv:76$28'.
Removing empty process `exe_unit_w26.$proc$./modules/exe_unit_w26.sv:76$28'.
Found and cleaned up 1 empty switch in `\bit_change.$proc$./modules/bit_change.sv:8$14'.
Removing empty process `bit_change.$proc$./modules/bit_change.sv:8$14'.
Found and cleaned up 1 empty switch in `\compare.$proc$./modules/compare.sv:7$12'.
Removing empty process `compare.$proc$./modules/compare.sv:7$12'.
Found and cleaned up 1 empty switch in `\left_shift.$proc$./modules/left_shift.sv:11$9'.
Removing empty process `left_shift.$proc$./modules/left_shift.sv:11$9'.
Found and cleaned up 1 empty switch in `\mux_4to1.$proc$./modules/mux_4to1.sv:10$8'.
Removing empty process `mux_4to1.$proc$./modules/mux_4to1.sv:10$8'.
Found and cleaned up 1 empty switch in `\u2_to_sm.$proc$./modules/u2_to_sm.sv:8$3'.
Removing empty process `u2_to_sm.$proc$./modules/u2_to_sm.sv:8$3'.
Found and cleaned up 1 empty switch in `\register.$proc$./modules/register.sv:8$1'.
Removing empty process `register.$proc$./modules/register.sv:8$1'.
Cleaned up 21 empty switches.

2.3. Executing OPT_EXPR pass (perform const folding).
Optimizing module $paramod\u2_to_sm\N=8.
<suppressed ~2 debug messages>
Optimizing module $paramod\left_shift\N=8.
<suppressed ~4 debug messages>
Optimizing module $paramod\bit_change\N=8.
Optimizing module $paramod\compare\N=8.
Optimizing module $paramod\mux_4to1\N=8.
<suppressed ~1 debug messages>
Optimizing module $paramod\register\N=8.
<suppressed ~2 debug messages>
Optimizing module $paramod\register\N=4.
<suppressed ~2 debug messages>
Optimizing module exe_unit_w26.
<suppressed ~12 debug messages>
Optimizing module bit_change.
Optimizing module compare.
Optimizing module left_shift.
<suppressed ~4 debug messages>
Optimizing module mux_4to1.
<suppressed ~1 debug messages>
Optimizing module u2_to_sm.
<suppressed ~2 debug messages>
Optimizing module register.
<suppressed ~2 debug messages>

2.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module $paramod\u2_to_sm\N=8..
Finding unused cells or wires in module $paramod\left_shift\N=8..
Finding unused cells or wires in module $paramod\bit_change\N=8..
Finding unused cells or wires in module $paramod\compare\N=8..
Finding unused cells or wires in module $paramod\mux_4to1\N=8..
Finding unused cells or wires in module $paramod\register\N=8..
Finding unused cells or wires in module $paramod\register\N=4..
Finding unused cells or wires in module \exe_unit_w26..
Finding unused cells or wires in module \bit_change..
Finding unused cells or wires in module \compare..
Finding unused cells or wires in module \left_shift..
Finding unused cells or wires in module \mux_4to1..
Finding unused cells or wires in module \u2_to_sm..
Finding unused cells or wires in module \register..
Removed 7 unused cells and 123 unused wires.
<suppressed ~23 debug messages>

2.5. Executing CHECK pass (checking for obvious problems).
checking module $paramod\bit_change\N=8..
checking module $paramod\compare\N=8..
checking module $paramod\left_shift\N=8..
checking module $paramod\mux_4to1\N=8..
checking module $paramod\register\N=4..
checking module $paramod\register\N=8..
checking module $paramod\u2_to_sm\N=8..
checking module bit_change..
checking module compare..
checking module exe_unit_w26..
checking module left_shift..
checking module mux_4to1..
checking module register..
checking module u2_to_sm..
found and reported 0 problems.

2.6. Executing OPT pass (performing simple optimizations).

2.6.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module $paramod\bit_change\N=8.
Optimizing module $paramod\compare\N=8.
Optimizing module $paramod\left_shift\N=8.
Optimizing module $paramod\mux_4to1\N=8.
Optimizing module $paramod\register\N=4.
Optimizing module $paramod\register\N=8.
Optimizing module $paramod\u2_to_sm\N=8.
Optimizing module bit_change.
Optimizing module compare.
Optimizing module exe_unit_w26.
Optimizing module left_shift.
Optimizing module mux_4to1.
Optimizing module register.
Optimizing module u2_to_sm.

2.6.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `$paramod\bit_change\N=8'.
Finding identical cells in module `$paramod\compare\N=8'.
Finding identical cells in module `$paramod\left_shift\N=8'.
Finding identical cells in module `$paramod\mux_4to1\N=8'.
Finding identical cells in module `$paramod\register\N=4'.
Finding identical cells in module `$paramod\register\N=8'.
Finding identical cells in module `$paramod\u2_to_sm\N=8'.
Finding identical cells in module `\bit_change'.
Finding identical cells in module `\compare'.
Finding identical cells in module `\exe_unit_w26'.
Finding identical cells in module `\left_shift'.
Finding identical cells in module `\mux_4to1'.
Finding identical cells in module `\register'.
Finding identical cells in module `\u2_to_sm'.
Removed a total of 0 cells.

2.6.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module $paramod\bit_change\N=8..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module $paramod\compare\N=8..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module $paramod\left_shift\N=8..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module $paramod\mux_4to1\N=8..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module $paramod\register\N=4..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module $paramod\register\N=8..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module $paramod\u2_to_sm\N=8..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
      Replacing known input bits on port A of cell $procmux$74: \u2_number -> { 1'0 \u2_number [6:0] }
  Analyzing evaluation results.
Running muxtree optimizer on module \bit_change..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \compare..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \exe_unit_w26..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \left_shift..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \mux_4to1..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \register..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \u2_to_sm..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
      Replacing known input bits on port A of cell $procmux$156: \u2_number -> { 1'0 \u2_number [6:0] }
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~27 debug messages>

2.6.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module $paramod\bit_change\N=8.
  Optimizing cells in module $paramod\compare\N=8.
  Optimizing cells in module $paramod\left_shift\N=8.
  Optimizing cells in module $paramod\mux_4to1\N=8.
  Optimizing cells in module $paramod\register\N=4.
  Optimizing cells in module $paramod\register\N=8.
  Optimizing cells in module $paramod\u2_to_sm\N=8.
  Optimizing cells in module \bit_change.
  Optimizing cells in module \compare.
  Optimizing cells in module \exe_unit_w26.
  Optimizing cells in module \left_shift.
  Optimizing cells in module \mux_4to1.
  Optimizing cells in module \register.
  Optimizing cells in module \u2_to_sm.
Performed a total of 0 changes.

2.6.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `$paramod\bit_change\N=8'.
Finding identical cells in module `$paramod\compare\N=8'.
Finding identical cells in module `$paramod\left_shift\N=8'.
Finding identical cells in module `$paramod\mux_4to1\N=8'.
Finding identical cells in module `$paramod\register\N=4'.
Finding identical cells in module `$paramod\register\N=8'.
Finding identical cells in module `$paramod\u2_to_sm\N=8'.
Finding identical cells in module `\bit_change'.
Finding identical cells in module `\compare'.
Finding identical cells in module `\exe_unit_w26'.
Finding identical cells in module `\left_shift'.
Finding identical cells in module `\mux_4to1'.
Finding identical cells in module `\register'.
Finding identical cells in module `\u2_to_sm'.
Removed a total of 0 cells.

2.6.6. Executing OPT_RMDFF pass (remove dff with constant values).

2.6.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module $paramod\bit_change\N=8..
Finding unused cells or wires in module $paramod\compare\N=8..
Finding unused cells or wires in module $paramod\left_shift\N=8..
Finding unused cells or wires in module $paramod\mux_4to1\N=8..
Finding unused cells or wires in module $paramod\register\N=4..
Finding unused cells or wires in module $paramod\register\N=8..
Finding unused cells or wires in module $paramod\u2_to_sm\N=8..
Finding unused cells or wires in module \bit_change..
Finding unused cells or wires in module \compare..
Finding unused cells or wires in module \exe_unit_w26..
Finding unused cells or wires in module \left_shift..
Finding unused cells or wires in module \mux_4to1..
Finding unused cells or wires in module \register..
Finding unused cells or wires in module \u2_to_sm..

2.6.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module $paramod\bit_change\N=8.
Optimizing module $paramod\compare\N=8.
Optimizing module $paramod\left_shift\N=8.
Optimizing module $paramod\mux_4to1\N=8.
Optimizing module $paramod\register\N=4.
Optimizing module $paramod\register\N=8.
Optimizing module $paramod\u2_to_sm\N=8.
Optimizing module bit_change.
Optimizing module compare.
Optimizing module exe_unit_w26.
Optimizing module left_shift.
Optimizing module mux_4to1.
Optimizing module register.
Optimizing module u2_to_sm.

2.6.9. Finished OPT passes. (There is nothing left to do.)

2.7. Executing WREDUCE pass (reducing word size of cells).
Removed top 31 bits (of 32) from port A of cell $paramod\bit_change\N=8.$shl$./modules/bit_change.sv:15$60 ($shl).
Removed top 31 bits (of 32) from port B of cell $paramod\bit_change\N=8.$lt$./modules/bit_change.sv:9$58 ($lt).
Removed top 28 bits (of 32) from port B of cell $paramod\bit_change\N=8.$ge$./modules/bit_change.sv:9$57 ($ge).
Removed top 24 bits (of 32) from port Y of cell $paramod\bit_change\N=8.$or$./modules/bit_change.sv:15$61 ($or).
Removed top 24 bits (of 32) from port B of cell $paramod\bit_change\N=8.$or$./modules/bit_change.sv:15$61 ($or).
Removed top 24 bits (of 32) from port Y of cell $paramod\bit_change\N=8.$shl$./modules/bit_change.sv:15$60 ($shl).
Removed top 24 bits (of 32) from wire $paramod\bit_change\N=8.$or$./modules/bit_change.sv:15$61_Y.
Removed top 24 bits (of 32) from wire $paramod\bit_change\N=8.$shl$./modules/bit_change.sv:15$60_Y.
Removed top 7 bits (of 8) from mux cell $paramod\compare\N=8.$procmux$92 ($mux).
Removed top 1 bits (of 8) from port Y of cell $paramod\left_shift\N=8.$sshl$./modules/left_shift.sv:18$64 ($sshl).
Removed top 31 bits (of 32) from port B of cell $paramod\left_shift\N=8.$lt$./modules/left_shift.sv:13$63 ($lt).
Removed top 1 bits (of 8) from wire $paramod\left_shift\N=8.$0\shifted_A[7:0].
Removed top 1 bits (of 2) from port B of cell $paramod\mux_4to1\N=8.$procmux$97_CMP0 ($eq).
Removed top 24 bits (of 32) from port A of cell $paramod\u2_to_sm\N=8.$add$./modules/u2_to_sm.sv:10$68 ($add).
Removed top 31 bits (of 32) from port B of cell $paramod\u2_to_sm\N=8.$add$./modules/u2_to_sm.sv:10$68 ($add).
Removed top 24 bits (of 32) from port Y of cell $paramod\u2_to_sm\N=8.$add$./modules/u2_to_sm.sv:10$68 ($add).
Removed top 24 bits (of 32) from wire $paramod\u2_to_sm\N=8.$add$./modules/u2_to_sm.sv:10$68_Y.
Removed top 28 bits (of 32) from port B of cell bit_change.$ge$./modules/bit_change.sv:9$15 ($ge).
Removed top 31 bits (of 32) from port A of cell bit_change.$shl$./modules/bit_change.sv:15$18 ($shl).
Removed top 31 bits (of 32) from port B of cell bit_change.$lt$./modules/bit_change.sv:9$16 ($lt).
Removed top 24 bits (of 32) from port Y of cell bit_change.$or$./modules/bit_change.sv:15$19 ($or).
Removed top 24 bits (of 32) from port B of cell bit_change.$or$./modules/bit_change.sv:15$19 ($or).
Removed top 24 bits (of 32) from port Y of cell bit_change.$shl$./modules/bit_change.sv:15$18 ($shl).
Removed top 24 bits (of 32) from wire bit_change.$or$./modules/bit_change.sv:15$19_Y.
Removed top 24 bits (of 32) from wire bit_change.$shl$./modules/bit_change.sv:15$18_Y.
Removed top 7 bits (of 8) from mux cell compare.$procmux$136 ($mux).
Removed top 30 bits (of 32) from port B of cell exe_unit_w26.$add$./modules/exe_unit_w26.sv:82$32 ($add).
Removed top 30 bits (of 32) from port B of cell exe_unit_w26.$add$./modules/exe_unit_w26.sv:82$34 ($add).
Removed top 30 bits (of 32) from port B of cell exe_unit_w26.$add$./modules/exe_unit_w26.sv:82$36 ($add).
Removed top 30 bits (of 32) from port B of cell exe_unit_w26.$add$./modules/exe_unit_w26.sv:82$38 ($add).
Removed top 30 bits (of 32) from port B of cell exe_unit_w26.$add$./modules/exe_unit_w26.sv:82$40 ($add).
Removed top 30 bits (of 32) from port B of cell exe_unit_w26.$add$./modules/exe_unit_w26.sv:82$42 ($add).
Removed top 30 bits (of 32) from port B of cell exe_unit_w26.$add$./modules/exe_unit_w26.sv:82$44 ($add).
Removed top 31 bits (of 32) from mux cell exe_unit_w26.$procmux$127 ($mux).
Removed top 31 bits (of 32) from wire exe_unit_w26.$1\count[31:0].
Removed top 31 bits (of 32) from port B of cell left_shift.$lt$./modules/left_shift.sv:13$10 ($lt).
Removed top 1 bits (of 8) from port Y of cell left_shift.$sshl$./modules/left_shift.sv:18$11 ($sshl).
Removed top 1 bits (of 8) from wire left_shift.$0\shifted_A[7:0].
Removed top 1 bits (of 2) from port B of cell mux_4to1.$procmux$150_CMP0 ($eq).
Removed top 24 bits (of 32) from port A of cell u2_to_sm.$add$./modules/u2_to_sm.sv:10$6 ($add).
Removed top 31 bits (of 32) from port B of cell u2_to_sm.$add$./modules/u2_to_sm.sv:10$6 ($add).
Removed top 24 bits (of 32) from port Y of cell u2_to_sm.$add$./modules/u2_to_sm.sv:10$6 ($add).
Removed top 24 bits (of 32) from wire u2_to_sm.$add$./modules/u2_to_sm.sv:10$6_Y.

2.8. Executing PEEPOPT pass (run peephole optimizers).

2.9. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module $paramod\bit_change\N=8..
Finding unused cells or wires in module $paramod\compare\N=8..
Finding unused cells or wires in module $paramod\left_shift\N=8..
Finding unused cells or wires in module $paramod\mux_4to1\N=8..
Finding unused cells or wires in module $paramod\register\N=4..
Finding unused cells or wires in module $paramod\register\N=8..
Finding unused cells or wires in module $paramod\u2_to_sm\N=8..
Finding unused cells or wires in module \bit_change..
Finding unused cells or wires in module \compare..
Finding unused cells or wires in module \exe_unit_w26..
Finding unused cells or wires in module \left_shift..
Finding unused cells or wires in module \mux_4to1..
Finding unused cells or wires in module \register..
Finding unused cells or wires in module \u2_to_sm..
Removed 0 unused cells and 9 unused wires.
<suppressed ~7 debug messages>

2.10. Executing TECHMAP pass (map to technology primitives).

2.10.1. Executing Verilog-2005 frontend: /usr/bin/../share/yosys/cmp2lut.v
Parsing Verilog input from `/usr/bin/../share/yosys/cmp2lut.v' to AST representation.
Generating RTLIL representation for module `\_90_lut_cmp_'.
Successfully finished Verilog frontend.

2.10.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~148 debug messages>

2.11. Executing ALUMACC pass (create $alu and $macc cells).
Extracting $alu and $macc cells in module $paramod\bit_change\N=8:
  creating $alu model for $ge$./modules/bit_change.sv:9$57 ($ge): new $alu
  creating $alu model for $lt$./modules/bit_change.sv:9$58 ($lt): new $alu
  creating $alu cell for $lt$./modules/bit_change.sv:9$58: $auto$alumacc.cc:474:replace_alu$193
  creating $alu cell for $ge$./modules/bit_change.sv:9$57: $auto$alumacc.cc:474:replace_alu$204
  created 2 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module $paramod\compare\N=8:
  creating $alu model for $lt$./modules/compare.sv:8$55 ($lt): new $alu
  creating $alu cell for $lt$./modules/compare.sv:8$55: $auto$alumacc.cc:474:replace_alu$214
  created 1 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module $paramod\left_shift\N=8:
  creating $alu model for $lt$./modules/left_shift.sv:13$63 ($lt): new $alu
  creating $alu cell for $lt$./modules/left_shift.sv:13$63: $auto$alumacc.cc:474:replace_alu$222
  created 1 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module $paramod\mux_4to1\N=8:
  created 0 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module $paramod\register\N=4:
  created 0 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module $paramod\register\N=8:
  created 0 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module $paramod\u2_to_sm\N=8:
  creating $macc model for $add$./modules/u2_to_sm.sv:10$68 ($add).
  creating $alu model for $macc $add$./modules/u2_to_sm.sv:10$68.
  creating $alu cell for $add$./modules/u2_to_sm.sv:10$68: $auto$alumacc.cc:474:replace_alu$235
  created 1 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module bit_change:
  creating $alu model for $ge$./modules/bit_change.sv:9$15 ($ge): new $alu
  creating $alu model for $lt$./modules/bit_change.sv:9$16 ($lt): new $alu
  creating $alu cell for $lt$./modules/bit_change.sv:9$16: $auto$alumacc.cc:474:replace_alu$240
  creating $alu cell for $ge$./modules/bit_change.sv:9$15: $auto$alumacc.cc:474:replace_alu$251
  created 2 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module compare:
  creating $alu model for $lt$./modules/compare.sv:8$13 ($lt): new $alu
  creating $alu cell for $lt$./modules/compare.sv:8$13: $auto$alumacc.cc:474:replace_alu$261
  created 1 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module exe_unit_w26:
  creating $macc model for $add$./modules/exe_unit_w26.sv:82$32 ($add).
  creating $macc model for $add$./modules/exe_unit_w26.sv:82$34 ($add).
  creating $macc model for $add$./modules/exe_unit_w26.sv:82$36 ($add).
  creating $macc model for $add$./modules/exe_unit_w26.sv:82$38 ($add).
  creating $macc model for $add$./modules/exe_unit_w26.sv:82$40 ($add).
  creating $macc model for $add$./modules/exe_unit_w26.sv:82$42 ($add).
  creating $macc model for $add$./modules/exe_unit_w26.sv:82$44 ($add).
  creating $alu model for $macc $add$./modules/exe_unit_w26.sv:82$44.
  creating $alu model for $macc $add$./modules/exe_unit_w26.sv:82$42.
  creating $alu model for $macc $add$./modules/exe_unit_w26.sv:82$40.
  creating $alu model for $macc $add$./modules/exe_unit_w26.sv:82$38.
  creating $alu model for $macc $add$./modules/exe_unit_w26.sv:82$36.
  creating $alu model for $macc $add$./modules/exe_unit_w26.sv:82$34.
  creating $alu model for $macc $add$./modules/exe_unit_w26.sv:82$32.
  creating $alu cell for $add$./modules/exe_unit_w26.sv:82$32: $auto$alumacc.cc:474:replace_alu$268
  creating $alu cell for $add$./modules/exe_unit_w26.sv:82$34: $auto$alumacc.cc:474:replace_alu$271
  creating $alu cell for $add$./modules/exe_unit_w26.sv:82$36: $auto$alumacc.cc:474:replace_alu$274
  creating $alu cell for $add$./modules/exe_unit_w26.sv:82$38: $auto$alumacc.cc:474:replace_alu$277
  creating $alu cell for $add$./modules/exe_unit_w26.sv:82$40: $auto$alumacc.cc:474:replace_alu$280
  creating $alu cell for $add$./modules/exe_unit_w26.sv:82$42: $auto$alumacc.cc:474:replace_alu$283
  creating $alu cell for $add$./modules/exe_unit_w26.sv:82$44: $auto$alumacc.cc:474:replace_alu$286
  created 7 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module left_shift:
  creating $alu model for $lt$./modules/left_shift.sv:13$10 ($lt): new $alu
  creating $alu cell for $lt$./modules/left_shift.sv:13$10: $auto$alumacc.cc:474:replace_alu$290
  created 1 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module mux_4to1:
  created 0 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module register:
  created 0 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module u2_to_sm:
  creating $macc model for $add$./modules/u2_to_sm.sv:10$6 ($add).
  creating $alu model for $macc $add$./modules/u2_to_sm.sv:10$6.
  creating $alu cell for $add$./modules/u2_to_sm.sv:10$6: $auto$alumacc.cc:474:replace_alu$303
  created 1 $alu and 0 $macc cells.

2.12. Executing SHARE pass (SAT-based resource sharing).

2.13. Executing OPT pass (performing simple optimizations).

2.13.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module $paramod\bit_change\N=8.
Optimizing module $paramod\compare\N=8.
Optimizing module $paramod\left_shift\N=8.
<suppressed ~2 debug messages>
Optimizing module $paramod\mux_4to1\N=8.
Optimizing module $paramod\register\N=4.
Optimizing module $paramod\register\N=8.
Optimizing module $paramod\u2_to_sm\N=8.
Optimizing module bit_change.
Optimizing module compare.
Optimizing module exe_unit_w26.
Optimizing module left_shift.
<suppressed ~2 debug messages>
Optimizing module mux_4to1.
Optimizing module register.
Optimizing module u2_to_sm.

2.13.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `$paramod\bit_change\N=8'.
Finding identical cells in module `$paramod\compare\N=8'.
Finding identical cells in module `$paramod\left_shift\N=8'.
Finding identical cells in module `$paramod\mux_4to1\N=8'.
Finding identical cells in module `$paramod\register\N=4'.
Finding identical cells in module `$paramod\register\N=8'.
Finding identical cells in module `$paramod\u2_to_sm\N=8'.
Finding identical cells in module `\bit_change'.
Finding identical cells in module `\compare'.
Finding identical cells in module `\exe_unit_w26'.
Finding identical cells in module `\left_shift'.
Finding identical cells in module `\mux_4to1'.
Finding identical cells in module `\register'.
Finding identical cells in module `\u2_to_sm'.
Removed a total of 0 cells.

2.13.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module $paramod\bit_change\N=8..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module $paramod\compare\N=8..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module $paramod\left_shift\N=8..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module $paramod\mux_4to1\N=8..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module $paramod\register\N=4..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module $paramod\register\N=8..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module $paramod\u2_to_sm\N=8..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \bit_change..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \compare..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \exe_unit_w26..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \left_shift..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \mux_4to1..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \register..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \u2_to_sm..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~27 debug messages>

2.13.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module $paramod\bit_change\N=8.
    New input vector for $reduce_or cell $auto$alumacc.cc:509:replace_alu$211: { $auto$rtlil.cc:1832:Not$208 $auto$rtlil.cc:1835:ReduceAnd$210 }
    New input vector for $reduce_and cell $auto$alumacc.cc:64:get_eq$196: { $auto$alumacc.cc:490:replace_alu$194 [0] $auto$alumacc.cc:490:replace_alu$194 [1] $auto$alumacc.cc:490:replace_alu$194 [2] $auto$alumacc.cc:490:replace_alu$194 [3] $auto$alumacc.cc:490:replace_alu$194 [4] $auto$alumacc.cc:490:replace_alu$194 [5] $auto$alumacc.cc:490:replace_alu$194 [6] $auto$alumacc.cc:490:replace_alu$194 [7] }
    New input vector for $reduce_and cell $auto$alumacc.cc:64:get_eq$209: { $auto$alumacc.cc:490:replace_alu$205 [0] $auto$alumacc.cc:490:replace_alu$205 [1] $auto$alumacc.cc:490:replace_alu$205 [2] $auto$alumacc.cc:490:replace_alu$205 [3] $auto$alumacc.cc:490:replace_alu$205 [4] $auto$alumacc.cc:490:replace_alu$205 [5] $auto$alumacc.cc:490:replace_alu$205 [6] $auto$alumacc.cc:490:replace_alu$205 [7] }
  Optimizing cells in module $paramod\bit_change\N=8.
  Optimizing cells in module $paramod\compare\N=8.
  Optimizing cells in module $paramod\left_shift\N=8.
    New input vector for $reduce_and cell $auto$alumacc.cc:64:get_eq$225: { $auto$alumacc.cc:490:replace_alu$223 [0] $auto$alumacc.cc:490:replace_alu$223 [1] $auto$alumacc.cc:490:replace_alu$223 [2] $auto$alumacc.cc:490:replace_alu$223 [3] $auto$alumacc.cc:490:replace_alu$223 [4] $auto$alumacc.cc:490:replace_alu$223 [5] $auto$alumacc.cc:490:replace_alu$223 [6] $auto$alumacc.cc:490:replace_alu$223 [7] }
  Optimizing cells in module $paramod\left_shift\N=8.
  Optimizing cells in module $paramod\mux_4to1\N=8.
  Optimizing cells in module $paramod\register\N=4.
  Optimizing cells in module $paramod\register\N=8.
  Optimizing cells in module $paramod\u2_to_sm\N=8.
  Optimizing cells in module \bit_change.
    New input vector for $reduce_and cell $auto$alumacc.cc:64:get_eq$243: { $auto$alumacc.cc:490:replace_alu$241 [0] $auto$alumacc.cc:490:replace_alu$241 [1] $auto$alumacc.cc:490:replace_alu$241 [2] $auto$alumacc.cc:490:replace_alu$241 [3] $auto$alumacc.cc:490:replace_alu$241 [4] $auto$alumacc.cc:490:replace_alu$241 [5] $auto$alumacc.cc:490:replace_alu$241 [6] $auto$alumacc.cc:490:replace_alu$241 [7] }
    New input vector for $reduce_and cell $auto$alumacc.cc:64:get_eq$256: { $auto$alumacc.cc:490:replace_alu$252 [0] $auto$alumacc.cc:490:replace_alu$252 [1] $auto$alumacc.cc:490:replace_alu$252 [2] $auto$alumacc.cc:490:replace_alu$252 [3] $auto$alumacc.cc:490:replace_alu$252 [4] $auto$alumacc.cc:490:replace_alu$252 [5] $auto$alumacc.cc:490:replace_alu$252 [6] $auto$alumacc.cc:490:replace_alu$252 [7] }
  Optimizing cells in module \bit_change.
  Optimizing cells in module \compare.
  Optimizing cells in module \exe_unit_w26.
  Optimizing cells in module \left_shift.
    New input vector for $reduce_and cell $auto$alumacc.cc:64:get_eq$293: { $auto$alumacc.cc:490:replace_alu$291 [0] $auto$alumacc.cc:490:replace_alu$291 [1] $auto$alumacc.cc:490:replace_alu$291 [2] $auto$alumacc.cc:490:replace_alu$291 [3] $auto$alumacc.cc:490:replace_alu$291 [4] $auto$alumacc.cc:490:replace_alu$291 [5] $auto$alumacc.cc:490:replace_alu$291 [6] $auto$alumacc.cc:490:replace_alu$291 [7] }
  Optimizing cells in module \left_shift.
  Optimizing cells in module \mux_4to1.
  Optimizing cells in module \register.
  Optimizing cells in module \u2_to_sm.
Performed a total of 7 changes.

2.13.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `$paramod\bit_change\N=8'.
Finding identical cells in module `$paramod\compare\N=8'.
Finding identical cells in module `$paramod\left_shift\N=8'.
Finding identical cells in module `$paramod\mux_4to1\N=8'.
Finding identical cells in module `$paramod\register\N=4'.
Finding identical cells in module `$paramod\register\N=8'.
Finding identical cells in module `$paramod\u2_to_sm\N=8'.
Finding identical cells in module `\bit_change'.
Finding identical cells in module `\compare'.
Finding identical cells in module `\exe_unit_w26'.
Finding identical cells in module `\left_shift'.
Finding identical cells in module `\mux_4to1'.
Finding identical cells in module `\register'.
Finding identical cells in module `\u2_to_sm'.
Removed a total of 0 cells.

2.13.6. Executing OPT_RMDFF pass (remove dff with constant values).

2.13.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module $paramod\bit_change\N=8..
Finding unused cells or wires in module $paramod\compare\N=8..
Finding unused cells or wires in module $paramod\left_shift\N=8..
Finding unused cells or wires in module $paramod\mux_4to1\N=8..
Finding unused cells or wires in module $paramod\register\N=4..
Finding unused cells or wires in module $paramod\register\N=8..
Finding unused cells or wires in module $paramod\u2_to_sm\N=8..
Finding unused cells or wires in module \bit_change..
Finding unused cells or wires in module \compare..
Finding unused cells or wires in module \exe_unit_w26..
Finding unused cells or wires in module \left_shift..
Finding unused cells or wires in module \mux_4to1..
Finding unused cells or wires in module \register..
Finding unused cells or wires in module \u2_to_sm..
Removed 2 unused cells and 10 unused wires.
<suppressed ~8 debug messages>

2.13.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module $paramod\bit_change\N=8.
Optimizing module $paramod\compare\N=8.
Optimizing module $paramod\left_shift\N=8.
Optimizing module $paramod\mux_4to1\N=8.
Optimizing module $paramod\register\N=4.
Optimizing module $paramod\register\N=8.
Optimizing module $paramod\u2_to_sm\N=8.
Optimizing module bit_change.
Optimizing module compare.
Optimizing module exe_unit_w26.
Optimizing module left_shift.
Optimizing module mux_4to1.
Optimizing module register.
Optimizing module u2_to_sm.

2.13.9. Rerunning OPT passes. (Maybe there is more to do..)

2.13.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module $paramod\bit_change\N=8..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module $paramod\compare\N=8..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module $paramod\left_shift\N=8..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module $paramod\mux_4to1\N=8..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module $paramod\register\N=4..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module $paramod\register\N=8..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module $paramod\u2_to_sm\N=8..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \bit_change..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \compare..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \exe_unit_w26..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \left_shift..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \mux_4to1..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \register..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \u2_to_sm..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~27 debug messages>

2.13.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module $paramod\bit_change\N=8.
  Optimizing cells in module $paramod\compare\N=8.
  Optimizing cells in module $paramod\left_shift\N=8.
  Optimizing cells in module $paramod\mux_4to1\N=8.
  Optimizing cells in module $paramod\register\N=4.
  Optimizing cells in module $paramod\register\N=8.
  Optimizing cells in module $paramod\u2_to_sm\N=8.
  Optimizing cells in module \bit_change.
  Optimizing cells in module \compare.
  Optimizing cells in module \exe_unit_w26.
  Optimizing cells in module \left_shift.
  Optimizing cells in module \mux_4to1.
  Optimizing cells in module \register.
  Optimizing cells in module \u2_to_sm.
Performed a total of 0 changes.

2.13.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `$paramod\bit_change\N=8'.
Finding identical cells in module `$paramod\compare\N=8'.
Finding identical cells in module `$paramod\left_shift\N=8'.
Finding identical cells in module `$paramod\mux_4to1\N=8'.
Finding identical cells in module `$paramod\register\N=4'.
Finding identical cells in module `$paramod\register\N=8'.
Finding identical cells in module `$paramod\u2_to_sm\N=8'.
Finding identical cells in module `\bit_change'.
Finding identical cells in module `\compare'.
Finding identical cells in module `\exe_unit_w26'.
Finding identical cells in module `\left_shift'.
Finding identical cells in module `\mux_4to1'.
Finding identical cells in module `\register'.
Finding identical cells in module `\u2_to_sm'.
Removed a total of 0 cells.

2.13.13. Executing OPT_RMDFF pass (remove dff with constant values).

2.13.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module $paramod\bit_change\N=8..
Finding unused cells or wires in module $paramod\compare\N=8..
Finding unused cells or wires in module $paramod\left_shift\N=8..
Finding unused cells or wires in module $paramod\mux_4to1\N=8..
Finding unused cells or wires in module $paramod\register\N=4..
Finding unused cells or wires in module $paramod\register\N=8..
Finding unused cells or wires in module $paramod\u2_to_sm\N=8..
Finding unused cells or wires in module \bit_change..
Finding unused cells or wires in module \compare..
Finding unused cells or wires in module \exe_unit_w26..
Finding unused cells or wires in module \left_shift..
Finding unused cells or wires in module \mux_4to1..
Finding unused cells or wires in module \register..
Finding unused cells or wires in module \u2_to_sm..

2.13.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module $paramod\bit_change\N=8.
Optimizing module $paramod\compare\N=8.
Optimizing module $paramod\left_shift\N=8.
Optimizing module $paramod\mux_4to1\N=8.
Optimizing module $paramod\register\N=4.
Optimizing module $paramod\register\N=8.
Optimizing module $paramod\u2_to_sm\N=8.
Optimizing module bit_change.
Optimizing module compare.
Optimizing module exe_unit_w26.
Optimizing module left_shift.
Optimizing module mux_4to1.
Optimizing module register.
Optimizing module u2_to_sm.

2.13.16. Finished OPT passes. (There is nothing left to do.)

2.14. Executing FSM pass (extract and optimize FSM).

2.14.1. Executing FSM_DETECT pass (finding FSMs in design).

2.14.2. Executing FSM_EXTRACT pass (extracting FSM from design).

2.14.3. Executing FSM_OPT pass (simple optimizations of FSMs).

2.14.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module $paramod\bit_change\N=8..
Finding unused cells or wires in module $paramod\compare\N=8..
Finding unused cells or wires in module $paramod\left_shift\N=8..
Finding unused cells or wires in module $paramod\mux_4to1\N=8..
Finding unused cells or wires in module $paramod\register\N=4..
Finding unused cells or wires in module $paramod\register\N=8..
Finding unused cells or wires in module $paramod\u2_to_sm\N=8..
Finding unused cells or wires in module \bit_change..
Finding unused cells or wires in module \compare..
Finding unused cells or wires in module \exe_unit_w26..
Finding unused cells or wires in module \left_shift..
Finding unused cells or wires in module \mux_4to1..
Finding unused cells or wires in module \register..
Finding unused cells or wires in module \u2_to_sm..

2.14.5. Executing FSM_OPT pass (simple optimizations of FSMs).

2.14.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).

2.14.7. Executing FSM_INFO pass (dumping all available information on FSM cells).

2.14.8. Executing FSM_MAP pass (mapping FSMs to basic logic).

2.15. Executing OPT pass (performing simple optimizations).

2.15.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module $paramod\bit_change\N=8.
Optimizing module $paramod\compare\N=8.
Optimizing module $paramod\left_shift\N=8.
Optimizing module $paramod\mux_4to1\N=8.
Optimizing module $paramod\register\N=4.
Optimizing module $paramod\register\N=8.
Optimizing module $paramod\u2_to_sm\N=8.
Optimizing module bit_change.
Optimizing module compare.
Optimizing module exe_unit_w26.
Optimizing module left_shift.
Optimizing module mux_4to1.
Optimizing module register.
Optimizing module u2_to_sm.

2.15.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `$paramod\bit_change\N=8'.
Finding identical cells in module `$paramod\compare\N=8'.
Finding identical cells in module `$paramod\left_shift\N=8'.
Finding identical cells in module `$paramod\mux_4to1\N=8'.
Finding identical cells in module `$paramod\register\N=4'.
Finding identical cells in module `$paramod\register\N=8'.
Finding identical cells in module `$paramod\u2_to_sm\N=8'.
Finding identical cells in module `\bit_change'.
Finding identical cells in module `\compare'.
Finding identical cells in module `\exe_unit_w26'.
Finding identical cells in module `\left_shift'.
Finding identical cells in module `\mux_4to1'.
Finding identical cells in module `\register'.
Finding identical cells in module `\u2_to_sm'.
Removed a total of 0 cells.

2.15.3. Executing OPT_RMDFF pass (remove dff with constant values).

2.15.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module $paramod\bit_change\N=8..
Finding unused cells or wires in module $paramod\compare\N=8..
Finding unused cells or wires in module $paramod\left_shift\N=8..
Finding unused cells or wires in module $paramod\mux_4to1\N=8..
Finding unused cells or wires in module $paramod\register\N=4..
Finding unused cells or wires in module $paramod\register\N=8..
Finding unused cells or wires in module $paramod\u2_to_sm\N=8..
Finding unused cells or wires in module \bit_change..
Finding unused cells or wires in module \compare..
Finding unused cells or wires in module \exe_unit_w26..
Finding unused cells or wires in module \left_shift..
Finding unused cells or wires in module \mux_4to1..
Finding unused cells or wires in module \register..
Finding unused cells or wires in module \u2_to_sm..

2.15.5. Finished fast OPT passes.

2.16. Executing MEMORY pass.

2.16.1. Executing MEMORY_DFF pass (merging $dff cells to $memrd and $memwr).

2.16.2. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module $paramod\bit_change\N=8..
Finding unused cells or wires in module $paramod\compare\N=8..
Finding unused cells or wires in module $paramod\left_shift\N=8..
Finding unused cells or wires in module $paramod\mux_4to1\N=8..
Finding unused cells or wires in module $paramod\register\N=4..
Finding unused cells or wires in module $paramod\register\N=8..
Finding unused cells or wires in module $paramod\u2_to_sm\N=8..
Finding unused cells or wires in module \bit_change..
Finding unused cells or wires in module \compare..
Finding unused cells or wires in module \exe_unit_w26..
Finding unused cells or wires in module \left_shift..
Finding unused cells or wires in module \mux_4to1..
Finding unused cells or wires in module \register..
Finding unused cells or wires in module \u2_to_sm..

2.16.3. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).

2.16.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module $paramod\bit_change\N=8..
Finding unused cells or wires in module $paramod\compare\N=8..
Finding unused cells or wires in module $paramod\left_shift\N=8..
Finding unused cells or wires in module $paramod\mux_4to1\N=8..
Finding unused cells or wires in module $paramod\register\N=4..
Finding unused cells or wires in module $paramod\register\N=8..
Finding unused cells or wires in module $paramod\u2_to_sm\N=8..
Finding unused cells or wires in module \bit_change..
Finding unused cells or wires in module \compare..
Finding unused cells or wires in module \exe_unit_w26..
Finding unused cells or wires in module \left_shift..
Finding unused cells or wires in module \mux_4to1..
Finding unused cells or wires in module \register..
Finding unused cells or wires in module \u2_to_sm..

2.16.5. Executing MEMORY_COLLECT pass (generating $mem cells).

2.17. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module $paramod\bit_change\N=8..
Finding unused cells or wires in module $paramod\compare\N=8..
Finding unused cells or wires in module $paramod\left_shift\N=8..
Finding unused cells or wires in module $paramod\mux_4to1\N=8..
Finding unused cells or wires in module $paramod\register\N=4..
Finding unused cells or wires in module $paramod\register\N=8..
Finding unused cells or wires in module $paramod\u2_to_sm\N=8..
Finding unused cells or wires in module \bit_change..
Finding unused cells or wires in module \compare..
Finding unused cells or wires in module \exe_unit_w26..
Finding unused cells or wires in module \left_shift..
Finding unused cells or wires in module \mux_4to1..
Finding unused cells or wires in module \register..
Finding unused cells or wires in module \u2_to_sm..

2.18. Executing OPT pass (performing simple optimizations).

2.18.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module $paramod\bit_change\N=8.
<suppressed ~1 debug messages>
Optimizing module $paramod\compare\N=8.
<suppressed ~1 debug messages>
Optimizing module $paramod\left_shift\N=8.
<suppressed ~1 debug messages>
Optimizing module $paramod\mux_4to1\N=8.
<suppressed ~1 debug messages>
Optimizing module $paramod\register\N=4.
Optimizing module $paramod\register\N=8.
Optimizing module $paramod\u2_to_sm\N=8.
<suppressed ~1 debug messages>
Optimizing module bit_change.
<suppressed ~1 debug messages>
Optimizing module compare.
<suppressed ~1 debug messages>
Optimizing module exe_unit_w26.
<suppressed ~8 debug messages>
Optimizing module left_shift.
<suppressed ~1 debug messages>
Optimizing module mux_4to1.
<suppressed ~1 debug messages>
Optimizing module register.
Optimizing module u2_to_sm.
<suppressed ~1 debug messages>

2.18.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `$paramod\bit_change\N=8'.
Finding identical cells in module `$paramod\compare\N=8'.
Finding identical cells in module `$paramod\left_shift\N=8'.
Finding identical cells in module `$paramod\mux_4to1\N=8'.
Finding identical cells in module `$paramod\register\N=4'.
Finding identical cells in module `$paramod\register\N=8'.
Finding identical cells in module `$paramod\u2_to_sm\N=8'.
Finding identical cells in module `\bit_change'.
Finding identical cells in module `\compare'.
Finding identical cells in module `\exe_unit_w26'.
Finding identical cells in module `\left_shift'.
Finding identical cells in module `\mux_4to1'.
Finding identical cells in module `\register'.
Finding identical cells in module `\u2_to_sm'.
Removed a total of 0 cells.

2.18.3. Executing OPT_RMDFF pass (remove dff with constant values).

2.18.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module $paramod\bit_change\N=8..
Finding unused cells or wires in module $paramod\compare\N=8..
Finding unused cells or wires in module $paramod\left_shift\N=8..
Finding unused cells or wires in module $paramod\mux_4to1\N=8..
Finding unused cells or wires in module $paramod\register\N=4..
Finding unused cells or wires in module $paramod\register\N=8..
Finding unused cells or wires in module $paramod\u2_to_sm\N=8..
Finding unused cells or wires in module \bit_change..
Finding unused cells or wires in module \compare..
Finding unused cells or wires in module \exe_unit_w26..
Finding unused cells or wires in module \left_shift..
Finding unused cells or wires in module \mux_4to1..
Finding unused cells or wires in module \register..
Finding unused cells or wires in module \u2_to_sm..
Removed 2 unused cells and 10 unused wires.
<suppressed ~9 debug messages>

2.18.5. Finished fast OPT passes.

2.19. Executing MEMORY_MAP pass (converting $mem cells to logic and flip-flops).

2.20. Executing OPT pass (performing simple optimizations).

2.20.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module $paramod\bit_change\N=8.
Optimizing module $paramod\compare\N=8.
Optimizing module $paramod\left_shift\N=8.
Optimizing module $paramod\mux_4to1\N=8.
Optimizing module $paramod\register\N=4.
Optimizing module $paramod\register\N=8.
Optimizing module $paramod\u2_to_sm\N=8.
Optimizing module bit_change.
Optimizing module compare.
Optimizing module exe_unit_w26.
Optimizing module left_shift.
Optimizing module mux_4to1.
Optimizing module register.
Optimizing module u2_to_sm.

2.20.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `$paramod\bit_change\N=8'.
Finding identical cells in module `$paramod\compare\N=8'.
Finding identical cells in module `$paramod\left_shift\N=8'.
Finding identical cells in module `$paramod\mux_4to1\N=8'.
Finding identical cells in module `$paramod\register\N=4'.
Finding identical cells in module `$paramod\register\N=8'.
Finding identical cells in module `$paramod\u2_to_sm\N=8'.
Finding identical cells in module `\bit_change'.
Finding identical cells in module `\compare'.
Finding identical cells in module `\exe_unit_w26'.
Finding identical cells in module `\left_shift'.
Finding identical cells in module `\mux_4to1'.
Finding identical cells in module `\register'.
Finding identical cells in module `\u2_to_sm'.
Removed a total of 0 cells.

2.20.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module $paramod\bit_change\N=8..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module $paramod\compare\N=8..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module $paramod\left_shift\N=8..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module $paramod\mux_4to1\N=8..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module $paramod\register\N=4..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module $paramod\register\N=8..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module $paramod\u2_to_sm\N=8..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \bit_change..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \compare..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \exe_unit_w26..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \left_shift..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \mux_4to1..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \register..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \u2_to_sm..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~18 debug messages>

2.20.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module $paramod\bit_change\N=8.
  Optimizing cells in module $paramod\compare\N=8.
  Optimizing cells in module $paramod\left_shift\N=8.
  Optimizing cells in module $paramod\mux_4to1\N=8.
  Optimizing cells in module $paramod\register\N=4.
  Optimizing cells in module $paramod\register\N=8.
  Optimizing cells in module $paramod\u2_to_sm\N=8.
  Optimizing cells in module \bit_change.
  Optimizing cells in module \compare.
  Optimizing cells in module \exe_unit_w26.
  Optimizing cells in module \left_shift.
  Optimizing cells in module \mux_4to1.
  Optimizing cells in module \register.
  Optimizing cells in module \u2_to_sm.
Performed a total of 0 changes.

2.20.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `$paramod\bit_change\N=8'.
Finding identical cells in module `$paramod\compare\N=8'.
Finding identical cells in module `$paramod\left_shift\N=8'.
Finding identical cells in module `$paramod\mux_4to1\N=8'.
Finding identical cells in module `$paramod\register\N=4'.
Finding identical cells in module `$paramod\register\N=8'.
Finding identical cells in module `$paramod\u2_to_sm\N=8'.
Finding identical cells in module `\bit_change'.
Finding identical cells in module `\compare'.
Finding identical cells in module `\exe_unit_w26'.
Finding identical cells in module `\left_shift'.
Finding identical cells in module `\mux_4to1'.
Finding identical cells in module `\register'.
Finding identical cells in module `\u2_to_sm'.
Removed a total of 0 cells.

2.20.6. Executing OPT_RMDFF pass (remove dff with constant values).

2.20.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module $paramod\bit_change\N=8..
Finding unused cells or wires in module $paramod\compare\N=8..
Finding unused cells or wires in module $paramod\left_shift\N=8..
Finding unused cells or wires in module $paramod\mux_4to1\N=8..
Finding unused cells or wires in module $paramod\register\N=4..
Finding unused cells or wires in module $paramod\register\N=8..
Finding unused cells or wires in module $paramod\u2_to_sm\N=8..
Finding unused cells or wires in module \bit_change..
Finding unused cells or wires in module \compare..
Finding unused cells or wires in module \exe_unit_w26..
Finding unused cells or wires in module \left_shift..
Finding unused cells or wires in module \mux_4to1..
Finding unused cells or wires in module \register..
Finding unused cells or wires in module \u2_to_sm..

2.20.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module $paramod\bit_change\N=8.
Optimizing module $paramod\compare\N=8.
Optimizing module $paramod\left_shift\N=8.
Optimizing module $paramod\mux_4to1\N=8.
Optimizing module $paramod\register\N=4.
Optimizing module $paramod\register\N=8.
Optimizing module $paramod\u2_to_sm\N=8.
Optimizing module bit_change.
Optimizing module compare.
Optimizing module exe_unit_w26.
Optimizing module left_shift.
Optimizing module mux_4to1.
Optimizing module register.
Optimizing module u2_to_sm.

2.20.9. Finished OPT passes. (There is nothing left to do.)

2.21. Executing TECHMAP pass (map to technology primitives).

2.21.1. Executing Verilog-2005 frontend: <techmap.v>
Parsing Verilog input from `<techmap.v>' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

2.21.2. Continuing TECHMAP pass.
Using extmapper simplemap for cells of type $mux.
Using extmapper simplemap for cells of type $dff.
Using extmapper simplemap for cells of type $not.
Using template $paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=1\B_WIDTH=8\Y_WIDTH=8 for cells of type $alu.
Using extmapper simplemap for cells of type $and.
Using extmapper simplemap for cells of type $xor.
Using template $paramod\_90_lcu\WIDTH=8 for cells of type $lcu.
Using extmapper simplemap for cells of type $pos.
Using extmapper simplemap for cells of type $or.
Using extmapper simplemap for cells of type $eq.
Using template $paramod\_90_pmux\WIDTH=8\S_WIDTH=3 for cells of type $pmux.
Using extmapper simplemap for cells of type $reduce_or.
Using template $paramod\_90_alu\A_SIGNED=1\B_SIGNED=1\A_WIDTH=8\B_WIDTH=8\Y_WIDTH=8 for cells of type $alu.
Using template $paramod$constmap:51980503fccadcc0b260320bb56d617e582ee7ee$paramod$6893e3620fb6110e34d79cc916be8d13babf624d\_90_shift_ops_shr_shl_sshl_sshr for cells of type $sshl.
Using template $paramod\_90_alu\A_SIGNED=1\B_SIGNED=1\A_WIDTH=1\B_WIDTH=8\Y_WIDTH=8 for cells of type $alu.
Using extmapper simplemap for cells of type $reduce_and.
Using template $paramod$constmap:72cdabb1749dac72049399dad655ca81335c3226$paramod$1387be111640f0925da5b53545d9af31cb93b7de\_90_shift_ops_shr_shl_sshl_sshr for cells of type $shl.
Using extmapper simplemap for cells of type $logic_or.
Using template $paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=4\B_WIDTH=8\Y_WIDTH=8 for cells of type $alu.
Using extmapper simplemap for cells of type $logic_not.
Using template $paramod\_90_alu\A_SIGNED=1\B_SIGNED=1\A_WIDTH=2\B_WIDTH=32\Y_WIDTH=32 for cells of type $alu.
Using template $paramod\_90_lcu\WIDTH=32 for cells of type $lcu.
No more expansions possible.
<suppressed ~2184 debug messages>

2.22. Executing OPT pass (performing simple optimizations).

2.22.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module $paramod\bit_change\N=8.
<suppressed ~82 debug messages>
Optimizing module $paramod\compare\N=8.
<suppressed ~10 debug messages>
Optimizing module $paramod\left_shift\N=8.
<suppressed ~42 debug messages>
Optimizing module $paramod\mux_4to1\N=8.
<suppressed ~2 debug messages>
Optimizing module $paramod\register\N=4.
Optimizing module $paramod\register\N=8.
Optimizing module $paramod\u2_to_sm\N=8.
<suppressed ~51 debug messages>
Optimizing module bit_change.
<suppressed ~82 debug messages>
Optimizing module compare.
<suppressed ~10 debug messages>
Optimizing module exe_unit_w26.
<suppressed ~2227 debug messages>
Optimizing module left_shift.
<suppressed ~42 debug messages>
Optimizing module mux_4to1.
<suppressed ~2 debug messages>
Optimizing module register.
Optimizing module u2_to_sm.
<suppressed ~51 debug messages>

2.22.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `$paramod\bit_change\N=8'.
<suppressed ~87 debug messages>
Finding identical cells in module `$paramod\compare\N=8'.
Finding identical cells in module `$paramod\left_shift\N=8'.
<suppressed ~21 debug messages>
Finding identical cells in module `$paramod\mux_4to1\N=8'.
<suppressed ~6 debug messages>
Finding identical cells in module `$paramod\register\N=4'.
Finding identical cells in module `$paramod\register\N=8'.
Finding identical cells in module `$paramod\u2_to_sm\N=8'.
Finding identical cells in module `\bit_change'.
<suppressed ~87 debug messages>
Finding identical cells in module `\compare'.
Finding identical cells in module `\exe_unit_w26'.
<suppressed ~3 debug messages>
Finding identical cells in module `\left_shift'.
<suppressed ~21 debug messages>
Finding identical cells in module `\mux_4to1'.
<suppressed ~6 debug messages>
Finding identical cells in module `\register'.
Finding identical cells in module `\u2_to_sm'.
Removed a total of 77 cells.

2.22.3. Executing OPT_RMDFF pass (remove dff with constant values).

2.22.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module $paramod\bit_change\N=8..
Finding unused cells or wires in module $paramod\compare\N=8..
Finding unused cells or wires in module $paramod\left_shift\N=8..
Finding unused cells or wires in module $paramod\mux_4to1\N=8..
Finding unused cells or wires in module $paramod\register\N=4..
Finding unused cells or wires in module $paramod\register\N=8..
Finding unused cells or wires in module $paramod\u2_to_sm\N=8..
Finding unused cells or wires in module \bit_change..
Finding unused cells or wires in module \compare..
Finding unused cells or wires in module \exe_unit_w26..
Finding unused cells or wires in module \left_shift..
Finding unused cells or wires in module \mux_4to1..
Finding unused cells or wires in module \register..
Finding unused cells or wires in module \u2_to_sm..
Removed 188 unused cells and 1481 unused wires.
<suppressed ~199 debug messages>

2.22.5. Finished fast OPT passes.

2.23. Executing ABC pass (technology mapping using ABC).

2.23.1. Extracting gate netlist of module `$paramod\bit_change\N=8' to `<abc-temp-dir>/input.blif'..
Extracted 69 gates and 87 wires to a netlist network with 16 inputs and 9 outputs.

2.23.1.1. Executing ABC.
Running ABC command: berkeley-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 17 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + retime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

2.23.1.2. Re-integrating ABC results.
ABC RESULTS:              AOI3 cells:        1
ABC RESULTS:               NOT cells:       10
ABC RESULTS:              OAI3 cells:        9
ABC RESULTS:                OR cells:       26
ABC RESULTS:             ORNOT cells:        2
ABC RESULTS:        internal signals:       62
ABC RESULTS:           input signals:       16
ABC RESULTS:          output signals:        9
Removing temp directory.

2.23.2. Extracting gate netlist of module `$paramod\compare\N=8' to `<abc-temp-dir>/input.blif'..
Extracted 50 gates and 66 wires to a netlist network with 16 inputs and 1 outputs.

2.23.2.1. Executing ABC.
Running ABC command: berkeley-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 17 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + retime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

2.23.2.2. Re-integrating ABC results.
ABC RESULTS:            ANDNOT cells:        7
ABC RESULTS:              AOI3 cells:        5
ABC RESULTS:              NAND cells:        1
ABC RESULTS:               NOR cells:        1
ABC RESULTS:              OAI3 cells:        2
ABC RESULTS:                OR cells:        1
ABC RESULTS:             ORNOT cells:        2
ABC RESULTS:              XNOR cells:        5
ABC RESULTS:               XOR cells:        4
ABC RESULTS:        internal signals:       49
ABC RESULTS:           input signals:       16
ABC RESULTS:          output signals:        1
Removing temp directory.

2.23.3. Extracting gate netlist of module `$paramod\left_shift\N=8' to `<abc-temp-dir>/input.blif'..
Extracted 68 gates and 85 wires to a netlist network with 16 inputs and 9 outputs.

2.23.3.1. Executing ABC.
Running ABC command: berkeley-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 17 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + retime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

2.23.3.2. Re-integrating ABC results.
ABC RESULTS:               AND cells:        1
ABC RESULTS:            ANDNOT cells:        9
ABC RESULTS:               MUX cells:       14
ABC RESULTS:               NOR cells:        2
ABC RESULTS:               NOT cells:        1
ABC RESULTS:                OR cells:       18
ABC RESULTS:             ORNOT cells:        7
ABC RESULTS:        internal signals:       60
ABC RESULTS:           input signals:       16
ABC RESULTS:          output signals:        9
Removing temp directory.

2.23.4. Extracting gate netlist of module `$paramod\mux_4to1\N=8' to `<abc-temp-dir>/input.blif'..
Extracted 58 gates and 93 wires to a netlist network with 34 inputs and 8 outputs.

2.23.4.1. Executing ABC.
Running ABC command: berkeley-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 17 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + retime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

2.23.4.2. Re-integrating ABC results.
ABC RESULTS:               AND cells:        1
ABC RESULTS:            ANDNOT cells:        9
ABC RESULTS:              AOI4 cells:        8
ABC RESULTS:               MUX cells:        8
ABC RESULTS:               NOR cells:        1
ABC RESULTS:             ORNOT cells:        9
ABC RESULTS:        internal signals:       51
ABC RESULTS:           input signals:       34
ABC RESULTS:          output signals:        8
Removing temp directory.

2.23.5. Extracting gate netlist of module `$paramod\register\N=4' to `<abc-temp-dir>/input.blif'..
Extracted 4 gates and 10 wires to a netlist network with 5 inputs and 4 outputs.

2.23.5.1. Executing ABC.
Running ABC command: berkeley-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 17 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + retime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

2.23.5.2. Re-integrating ABC results.
ABC RESULTS:               AND cells:        4
ABC RESULTS:        internal signals:        1
ABC RESULTS:           input signals:        5
ABC RESULTS:          output signals:        4
Removing temp directory.

2.23.6. Extracting gate netlist of module `$paramod\register\N=8' to `<abc-temp-dir>/input.blif'..
Extracted 8 gates and 18 wires to a netlist network with 9 inputs and 8 outputs.

2.23.6.1. Executing ABC.
Running ABC command: berkeley-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 17 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + retime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

2.23.6.2. Re-integrating ABC results.
ABC RESULTS:               AND cells:        8
ABC RESULTS:        internal signals:        1
ABC RESULTS:           input signals:        9
ABC RESULTS:          output signals:        8
Removing temp directory.

2.23.7. Extracting gate netlist of module `$paramod\u2_to_sm\N=8' to `<abc-temp-dir>/input.blif'..
Extracted 33 gates and 43 wires to a netlist network with 8 inputs and 9 outputs.

2.23.7.1. Executing ABC.
Running ABC command: berkeley-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 17 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + retime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

2.23.7.2. Re-integrating ABC results.
ABC RESULTS:               AND cells:        1
ABC RESULTS:            ANDNOT cells:        3
ABC RESULTS:               MUX cells:        6
ABC RESULTS:               NOT cells:        1
ABC RESULTS:                OR cells:        9
ABC RESULTS:               XOR cells:        6
ABC RESULTS:        internal signals:       26
ABC RESULTS:           input signals:        8
ABC RESULTS:          output signals:        9
Removing temp directory.

2.23.8. Extracting gate netlist of module `\bit_change' to `<abc-temp-dir>/input.blif'..
Extracted 69 gates and 87 wires to a netlist network with 16 inputs and 9 outputs.

2.23.8.1. Executing ABC.
Running ABC command: berkeley-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 17 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + retime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

2.23.8.2. Re-integrating ABC results.
ABC RESULTS:              AOI3 cells:        1
ABC RESULTS:               NOT cells:       10
ABC RESULTS:              OAI3 cells:        9
ABC RESULTS:                OR cells:       26
ABC RESULTS:             ORNOT cells:        2
ABC RESULTS:        internal signals:       62
ABC RESULTS:           input signals:       16
ABC RESULTS:          output signals:        9
Removing temp directory.

2.23.9. Extracting gate netlist of module `\compare' to `<abc-temp-dir>/input.blif'..
Extracted 50 gates and 66 wires to a netlist network with 16 inputs and 1 outputs.

2.23.9.1. Executing ABC.
Running ABC command: berkeley-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 17 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + retime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

2.23.9.2. Re-integrating ABC results.
ABC RESULTS:            ANDNOT cells:        7
ABC RESULTS:              AOI3 cells:        5
ABC RESULTS:              NAND cells:        1
ABC RESULTS:               NOR cells:        1
ABC RESULTS:              OAI3 cells:        2
ABC RESULTS:                OR cells:        1
ABC RESULTS:             ORNOT cells:        2
ABC RESULTS:              XNOR cells:        5
ABC RESULTS:               XOR cells:        4
ABC RESULTS:        internal signals:       49
ABC RESULTS:           input signals:       16
ABC RESULTS:          output signals:        1
Removing temp directory.

2.23.10. Extracting gate netlist of module `\exe_unit_w26' to `<abc-temp-dir>/input.blif'..
Extracted 31 gates and 42 wires to a netlist network with 10 inputs and 3 outputs.

2.23.10.1. Executing ABC.
Running ABC command: berkeley-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 17 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + retime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

2.23.10.2. Re-integrating ABC results.
ABC RESULTS:               AND cells:        1
ABC RESULTS:            ANDNOT cells:        2
ABC RESULTS:              NAND cells:        3
ABC RESULTS:                OR cells:        2
ABC RESULTS:              XNOR cells:        1
ABC RESULTS:               XOR cells:        6
ABC RESULTS:        internal signals:       29
ABC RESULTS:           input signals:       10
ABC RESULTS:          output signals:        3
Removing temp directory.

2.23.11. Extracting gate netlist of module `\left_shift' to `<abc-temp-dir>/input.blif'..
Extracted 68 gates and 85 wires to a netlist network with 16 inputs and 9 outputs.

2.23.11.1. Executing ABC.
Running ABC command: berkeley-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 17 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + retime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

2.23.11.2. Re-integrating ABC results.
ABC RESULTS:               AND cells:        1
ABC RESULTS:            ANDNOT cells:        9
ABC RESULTS:               MUX cells:       14
ABC RESULTS:               NOR cells:        2
ABC RESULTS:               NOT cells:        1
ABC RESULTS:                OR cells:       18
ABC RESULTS:             ORNOT cells:        7
ABC RESULTS:        internal signals:       60
ABC RESULTS:           input signals:       16
ABC RESULTS:          output signals:        9
Removing temp directory.

2.23.12. Extracting gate netlist of module `\mux_4to1' to `<abc-temp-dir>/input.blif'..
Extracted 58 gates and 93 wires to a netlist network with 34 inputs and 8 outputs.

2.23.12.1. Executing ABC.
Running ABC command: berkeley-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 17 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + retime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

2.23.12.2. Re-integrating ABC results.
ABC RESULTS:               AND cells:        1
ABC RESULTS:            ANDNOT cells:        9
ABC RESULTS:              AOI4 cells:        8
ABC RESULTS:               MUX cells:        8
ABC RESULTS:               NOR cells:        1
ABC RESULTS:             ORNOT cells:        9
ABC RESULTS:        internal signals:       51
ABC RESULTS:           input signals:       34
ABC RESULTS:          output signals:        8
Removing temp directory.

2.23.13. Extracting gate netlist of module `\register' to `<abc-temp-dir>/input.blif'..
Extracted 8 gates and 18 wires to a netlist network with 9 inputs and 8 outputs.

2.23.13.1. Executing ABC.
Running ABC command: berkeley-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 17 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + retime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

2.23.13.2. Re-integrating ABC results.
ABC RESULTS:               AND cells:        8
ABC RESULTS:        internal signals:        1
ABC RESULTS:           input signals:        9
ABC RESULTS:          output signals:        8
Removing temp directory.

2.23.14. Extracting gate netlist of module `\u2_to_sm' to `<abc-temp-dir>/input.blif'..
Extracted 33 gates and 43 wires to a netlist network with 8 inputs and 9 outputs.

2.23.14.1. Executing ABC.
Running ABC command: berkeley-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 17 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + retime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

2.23.14.2. Re-integrating ABC results.
ABC RESULTS:               AND cells:        1
ABC RESULTS:            ANDNOT cells:        3
ABC RESULTS:               MUX cells:        6
ABC RESULTS:               NOT cells:        1
ABC RESULTS:                OR cells:        9
ABC RESULTS:               XOR cells:        6
ABC RESULTS:        internal signals:       26
ABC RESULTS:           input signals:        8
ABC RESULTS:          output signals:        9
Removing temp directory.

2.24. Executing OPT pass (performing simple optimizations).

2.24.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module $paramod\bit_change\N=8.
Optimizing module $paramod\compare\N=8.
Optimizing module $paramod\left_shift\N=8.
Optimizing module $paramod\mux_4to1\N=8.
Optimizing module $paramod\register\N=4.
Optimizing module $paramod\register\N=8.
Optimizing module $paramod\u2_to_sm\N=8.
<suppressed ~6 debug messages>
Optimizing module bit_change.
Optimizing module compare.
Optimizing module exe_unit_w26.
Optimizing module left_shift.
Optimizing module mux_4to1.
Optimizing module register.
Optimizing module u2_to_sm.
<suppressed ~6 debug messages>

2.24.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `$paramod\bit_change\N=8'.
Finding identical cells in module `$paramod\compare\N=8'.
Finding identical cells in module `$paramod\left_shift\N=8'.
Finding identical cells in module `$paramod\mux_4to1\N=8'.
Finding identical cells in module `$paramod\register\N=4'.
Finding identical cells in module `$paramod\register\N=8'.
Finding identical cells in module `$paramod\u2_to_sm\N=8'.
Finding identical cells in module `\bit_change'.
Finding identical cells in module `\compare'.
Finding identical cells in module `\exe_unit_w26'.
Finding identical cells in module `\left_shift'.
Finding identical cells in module `\mux_4to1'.
Finding identical cells in module `\register'.
Finding identical cells in module `\u2_to_sm'.
Removed a total of 0 cells.

2.24.3. Executing OPT_RMDFF pass (remove dff with constant values).

2.24.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module $paramod\bit_change\N=8..
Finding unused cells or wires in module $paramod\compare\N=8..
Finding unused cells or wires in module $paramod\left_shift\N=8..
Finding unused cells or wires in module $paramod\mux_4to1\N=8..
Finding unused cells or wires in module $paramod\register\N=4..
Finding unused cells or wires in module $paramod\register\N=8..
Finding unused cells or wires in module $paramod\u2_to_sm\N=8..
Finding unused cells or wires in module \bit_change..
Finding unused cells or wires in module \compare..
Finding unused cells or wires in module \exe_unit_w26..
Finding unused cells or wires in module \left_shift..
Finding unused cells or wires in module \mux_4to1..
Finding unused cells or wires in module \register..
Finding unused cells or wires in module \u2_to_sm..
Removed 0 unused cells and 496 unused wires.
<suppressed ~14 debug messages>

2.24.5. Finished fast OPT passes.

2.25. Executing HIERARCHY pass (managing design hierarchy).

2.26. Printing statistics.

=== $paramod\bit_change\N=8 ===

   Number of wires:                 43
   Number of wire bits:             64
   Number of public wires:           4
   Number of public wire bits:      25
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 48
     $_AOI3_                         1
     $_NOT_                         10
     $_OAI3_                         9
     $_ORNOT_                        2
     $_OR_                          26

=== $paramod\compare\N=8 ===

   Number of wires:                 30
   Number of wire bits:             51
   Number of public wires:           3
   Number of public wire bits:      24
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 28
     $_ANDNOT_                       7
     $_AOI3_                         5
     $_NAND_                         1
     $_NOR_                          1
     $_OAI3_                         2
     $_ORNOT_                        2
     $_OR_                           1
     $_XNOR_                         5
     $_XOR_                          4

=== $paramod\left_shift\N=8 ===

   Number of wires:                 47
   Number of wire bits:             68
   Number of public wires:           4
   Number of public wire bits:      25
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 52
     $_ANDNOT_                       9
     $_AND_                          1
     $_MUX_                         14
     $_NOR_                          2
     $_NOT_                          1
     $_ORNOT_                        7
     $_OR_                          18

=== $paramod\mux_4to1\N=8 ===

   Number of wires:                 34
   Number of wire bits:             70
   Number of public wires:           6
   Number of public wire bits:      42
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 36
     $_ANDNOT_                       9
     $_AND_                          1
     $_AOI4_                         8
     $_MUX_                          8
     $_NOR_                          1
     $_ORNOT_                        9

=== $paramod\register\N=4 ===

   Number of wires:                  5
   Number of wire bits:             14
   Number of public wires:           4
   Number of public wire bits:      10
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                  8
     $_AND_                          4
     $_DFF_P_                        4

=== $paramod\register\N=8 ===

   Number of wires:                  5
   Number of wire bits:             26
   Number of public wires:           4
   Number of public wire bits:      18
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 16
     $_AND_                          8
     $_DFF_P_                        8

=== $paramod\u2_to_sm\N=8 ===

   Number of wires:                 20
   Number of wire bits:             34
   Number of public wires:           3
   Number of public wire bits:      17
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 26
     $_ANDNOT_                       3
     $_AND_                          1
     $_MUX_                          6
     $_NOT_                          1
     $_OR_                           9
     $_XOR_                          6

=== bit_change ===

   Number of wires:                 43
   Number of wire bits:             64
   Number of public wires:           4
   Number of public wire bits:      25
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 48
     $_AOI3_                         1
     $_NOT_                         10
     $_OAI3_                         9
     $_ORNOT_                        2
     $_OR_                          26

=== compare ===

   Number of wires:                 30
   Number of wire bits:             51
   Number of public wires:           3
   Number of public wire bits:      24
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 28
     $_ANDNOT_                       7
     $_AOI3_                         5
     $_NAND_                         1
     $_NOR_                          1
     $_OAI3_                         2
     $_ORNOT_                        2
     $_OR_                           1
     $_XNOR_                         5
     $_XOR_                          4

=== exe_unit_w26 ===

   Number of wires:                 30
   Number of wire bits:            155
   Number of public wires:          18
   Number of public wire bits:     143
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 22
     $_ANDNOT_                       2
     $_AND_                          1
     $_NAND_                         3
     $_OR_                           2
     $_XNOR_                         1
     $_XOR_                          6
     $paramod\bit_change\N=8         1
     $paramod\compare\N=8            1
     $paramod\left_shift\N=8         1
     $paramod\mux_4to1\N=8           1
     $paramod\register\N=4           1
     $paramod\register\N=8           1
     $paramod\u2_to_sm\N=8           1

=== left_shift ===

   Number of wires:                 47
   Number of wire bits:             68
   Number of public wires:           4
   Number of public wire bits:      25
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 52
     $_ANDNOT_                       9
     $_AND_                          1
     $_MUX_                         14
     $_NOR_                          2
     $_NOT_                          1
     $_ORNOT_                        7
     $_OR_                          18

=== mux_4to1 ===

   Number of wires:                 34
   Number of wire bits:             70
   Number of public wires:           6
   Number of public wire bits:      42
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 36
     $_ANDNOT_                       9
     $_AND_                          1
     $_AOI4_                         8
     $_MUX_                          8
     $_NOR_                          1
     $_ORNOT_                        9

=== register ===

   Number of wires:                  5
   Number of wire bits:             26
   Number of public wires:           4
   Number of public wire bits:      18
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 16
     $_AND_                          8
     $_DFF_P_                        8

=== u2_to_sm ===

   Number of wires:                 20
   Number of wire bits:             34
   Number of public wires:           3
   Number of public wire bits:      17
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 26
     $_ANDNOT_                       3
     $_AND_                          1
     $_MUX_                          6
     $_NOT_                          1
     $_OR_                           9
     $_XOR_                          6

2.27. Executing CHECK pass (checking for obvious problems).
checking module $paramod\bit_change\N=8..
checking module $paramod\compare\N=8..
checking module $paramod\left_shift\N=8..
checking module $paramod\mux_4to1\N=8..
checking module $paramod\register\N=4..
checking module $paramod\register\N=8..
checking module $paramod\u2_to_sm\N=8..
checking module bit_change..
checking module compare..
checking module exe_unit_w26..
checking module left_shift..
checking module mux_4to1..
checking module register..
checking module u2_to_sm..
found and reported 0 problems.

3. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module $paramod\bit_change\N=8..
Finding unused cells or wires in module $paramod\compare\N=8..
Finding unused cells or wires in module $paramod\left_shift\N=8..
Finding unused cells or wires in module $paramod\mux_4to1\N=8..
Finding unused cells or wires in module $paramod\register\N=4..
Finding unused cells or wires in module $paramod\register\N=8..
Finding unused cells or wires in module $paramod\u2_to_sm\N=8..
Finding unused cells or wires in module \bit_change..
Finding unused cells or wires in module \compare..
Finding unused cells or wires in module \exe_unit_w26..
Finding unused cells or wires in module \left_shift..
Finding unused cells or wires in module \mux_4to1..
Finding unused cells or wires in module \register..
Finding unused cells or wires in module \u2_to_sm..

4. Executing Verilog backend.
Dumping module `$paramod\bit_change\N=8'.
Dumping module `$paramod\compare\N=8'.
Dumping module `$paramod\left_shift\N=8'.
Dumping module `$paramod\mux_4to1\N=8'.
Dumping module `$paramod\register\N=4'.
Dumping module `$paramod\register\N=8'.
Dumping module `$paramod\u2_to_sm\N=8'.
Dumping module `\bit_change'.
Dumping module `\compare'.
Dumping module `\exe_unit_w26'.
Dumping module `\left_shift'.
Dumping module `\mux_4to1'.
Dumping module `\register'.
Dumping module `\u2_to_sm'.

5. Printing statistics.

=== $paramod\bit_change\N=8 ===

   Number of wires:                 43
   Number of wire bits:             64
   Number of public wires:           4
   Number of public wire bits:      25
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 48
     $_AOI3_                         1
     $_NOT_                         10
     $_OAI3_                         9
     $_ORNOT_                        2
     $_OR_                          26

=== $paramod\compare\N=8 ===

   Number of wires:                 30
   Number of wire bits:             51
   Number of public wires:           3
   Number of public wire bits:      24
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 28
     $_ANDNOT_                       7
     $_AOI3_                         5
     $_NAND_                         1
     $_NOR_                          1
     $_OAI3_                         2
     $_ORNOT_                        2
     $_OR_                           1
     $_XNOR_                         5
     $_XOR_                          4

=== $paramod\left_shift\N=8 ===

   Number of wires:                 47
   Number of wire bits:             68
   Number of public wires:           4
   Number of public wire bits:      25
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 52
     $_ANDNOT_                       9
     $_AND_                          1
     $_MUX_                         14
     $_NOR_                          2
     $_NOT_                          1
     $_ORNOT_                        7
     $_OR_                          18

=== $paramod\mux_4to1\N=8 ===

   Number of wires:                 34
   Number of wire bits:             70
   Number of public wires:           6
   Number of public wire bits:      42
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 36
     $_ANDNOT_                       9
     $_AND_                          1
     $_AOI4_                         8
     $_MUX_                          8
     $_NOR_                          1
     $_ORNOT_                        9

=== $paramod\register\N=4 ===

   Number of wires:                  5
   Number of wire bits:             14
   Number of public wires:           4
   Number of public wire bits:      10
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                  8
     $_AND_                          4
     $_DFF_P_                        4

=== $paramod\register\N=8 ===

   Number of wires:                  5
   Number of wire bits:             26
   Number of public wires:           4
   Number of public wire bits:      18
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 16
     $_AND_                          8
     $_DFF_P_                        8

=== $paramod\u2_to_sm\N=8 ===

   Number of wires:                 20
   Number of wire bits:             34
   Number of public wires:           3
   Number of public wire bits:      17
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 26
     $_ANDNOT_                       3
     $_AND_                          1
     $_MUX_                          6
     $_NOT_                          1
     $_OR_                           9
     $_XOR_                          6

=== bit_change ===

   Number of wires:                 43
   Number of wire bits:             64
   Number of public wires:           4
   Number of public wire bits:      25
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 48
     $_AOI3_                         1
     $_NOT_                         10
     $_OAI3_                         9
     $_ORNOT_                        2
     $_OR_                          26

=== compare ===

   Number of wires:                 30
   Number of wire bits:             51
   Number of public wires:           3
   Number of public wire bits:      24
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 28
     $_ANDNOT_                       7
     $_AOI3_                         5
     $_NAND_                         1
     $_NOR_                          1
     $_OAI3_                         2
     $_ORNOT_                        2
     $_OR_                           1
     $_XNOR_                         5
     $_XOR_                          4

=== exe_unit_w26 ===

   Number of wires:                 30
   Number of wire bits:            155
   Number of public wires:          18
   Number of public wire bits:     143
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 22
     $_ANDNOT_                       2
     $_AND_                          1
     $_NAND_                         3
     $_OR_                           2
     $_XNOR_                         1
     $_XOR_                          6
     $paramod\bit_change\N=8         1
     $paramod\compare\N=8            1
     $paramod\left_shift\N=8         1
     $paramod\mux_4to1\N=8           1
     $paramod\register\N=4           1
     $paramod\register\N=8           1
     $paramod\u2_to_sm\N=8           1

=== left_shift ===

   Number of wires:                 47
   Number of wire bits:             68
   Number of public wires:           4
   Number of public wire bits:      25
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 52
     $_ANDNOT_                       9
     $_AND_                          1
     $_MUX_                         14
     $_NOR_                          2
     $_NOT_                          1
     $_ORNOT_                        7
     $_OR_                          18

=== mux_4to1 ===

   Number of wires:                 34
   Number of wire bits:             70
   Number of public wires:           6
   Number of public wire bits:      42
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 36
     $_ANDNOT_                       9
     $_AND_                          1
     $_AOI4_                         8
     $_MUX_                          8
     $_NOR_                          1
     $_ORNOT_                        9

=== register ===

   Number of wires:                  5
   Number of wire bits:             26
   Number of public wires:           4
   Number of public wire bits:      18
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 16
     $_AND_                          8
     $_DFF_P_                        8

=== u2_to_sm ===

   Number of wires:                 20
   Number of wire bits:             34
   Number of public wires:           3
   Number of public wire bits:      17
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 26
     $_ANDNOT_                       3
     $_AND_                          1
     $_MUX_                          6
     $_NOT_                          1
     $_OR_                           9
     $_XOR_                          6

End of script. Logfile hash: fd678d9f56
CPU: user 0.92s system 0.04s, MEM: 29.50 MB total, 22.49 MB resident
Yosys 0.9 (git sha1 1979e0b)
Time spent: 19% 16x opt_expr (0 sec), 17% 2x techmap (0 sec), ...

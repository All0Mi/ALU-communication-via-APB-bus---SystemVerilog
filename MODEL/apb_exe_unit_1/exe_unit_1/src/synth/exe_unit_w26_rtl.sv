/* Generated by Yosys 0.9 (git sha1 1979e0b) */

module \$paramod\bit_change\N=8 (A, B, result, error);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  wire _11_;
  wire _12_;
  wire _13_;
  wire _14_;
  wire _15_;
  wire _16_;
  wire _17_;
  wire _18_;
  wire _19_;
  wire _20_;
  wire _21_;
  wire _22_;
  wire _23_;
  wire _24_;
  wire _25_;
  wire _26_;
  wire _27_;
  wire _28_;
  wire _29_;
  wire _30_;
  wire _31_;
  wire _32_;
  wire _33_;
  wire _34_;
  wire _35_;
  wire _36_;
  wire _37_;
  wire _38_;
  input [7:0] A;
  input [7:0] B;
  output error;
  output [7:0] result;
  assign _00_ = B[7] | B[6];
  assign _01_ = B[5] | B[4];
  assign _02_ = _01_ | _00_;
  assign _03_ = B[2] | ~(B[3]);
  assign _04_ = B[0] | B[1];
  assign _05_ = _04_ | _03_;
  assign _06_ = ~((_05_ & B[3]) | _02_);
  assign error = ~((_05_ | _02_) & _06_);
  assign _07_ = ~A[0];
  assign _08_ = _02_ | B[0];
  assign _09_ = _08_ | B[1];
  assign _10_ = _09_ | B[2];
  assign _11_ = _10_ | B[3];
  assign result[0] = ~((_11_ | error) & _07_);
  assign _12_ = ~A[1];
  assign _13_ = _02_ | ~(B[0]);
  assign _14_ = _13_ | B[1];
  assign _15_ = _14_ | B[2];
  assign _16_ = _15_ | B[3];
  assign result[1] = ~((_16_ | error) & _12_);
  assign _17_ = ~A[2];
  assign _18_ = ~B[1];
  assign _19_ = _08_ | _18_;
  assign _20_ = _19_ | B[2];
  assign _21_ = _20_ | B[3];
  assign result[2] = ~((_21_ | error) & _17_);
  assign _22_ = ~A[3];
  assign _23_ = _13_ | _18_;
  assign _24_ = _23_ | B[2];
  assign _25_ = _24_ | B[3];
  assign result[3] = ~((_25_ | error) & _22_);
  assign _26_ = ~A[4];
  assign _27_ = ~B[2];
  assign _28_ = _09_ | _27_;
  assign _29_ = _28_ | B[3];
  assign result[4] = ~((_29_ | error) & _26_);
  assign _30_ = ~A[5];
  assign _31_ = _14_ | _27_;
  assign _32_ = _31_ | B[3];
  assign result[5] = ~((_32_ | error) & _30_);
  assign _33_ = ~A[6];
  assign _34_ = _19_ | _27_;
  assign _35_ = _34_ | B[3];
  assign result[6] = ~((_35_ | error) & _33_);
  assign _36_ = ~A[7];
  assign _37_ = _23_ | _27_;
  assign _38_ = _37_ | B[3];
  assign result[7] = ~((_38_ | error) & _36_);
endmodule

module \$paramod\compare\N=8 (A, B, result);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  wire _11_;
  wire _12_;
  wire _13_;
  wire _14_;
  wire _15_;
  wire _16_;
  wire _17_;
  wire _18_;
  wire _19_;
  wire _20_;
  wire _21_;
  wire _22_;
  wire _23_;
  wire _24_;
  wire _25_;
  wire _26_;
  input [7:0] A;
  input [7:0] B;
  output [7:0] result;
  assign _00_ = A[7] ^ B[7];
  assign _01_ = A[7] & ~(B[7]);
  assign _02_ = ~(A[7] ^ B[7]);
  assign _03_ = A[6] & ~(B[6]);
  assign _04_ = ~((_03_ & _02_) | _01_);
  assign _05_ = A[6] ^ B[6];
  assign _06_ = _05_ | _00_;
  assign _07_ = A[5] & ~(B[5]);
  assign _08_ = ~(A[5] ^ B[5]);
  assign _09_ = A[4] & ~(B[4]);
  assign _10_ = ~((_09_ & _08_) | _07_);
  assign _11_ = ~((_10_ | _06_) & _04_);
  assign _12_ = ~(A[4] ^ B[4]);
  assign _13_ = ~(_12_ & _08_);
  assign _14_ = ~(_13_ | _06_);
  assign _15_ = A[3] & ~(B[3]);
  assign _16_ = ~(A[3] ^ B[3]);
  assign _17_ = A[2] & ~(B[2]);
  assign _18_ = ~((_17_ & _16_) | _15_);
  assign _19_ = A[2] ^ B[2];
  assign _20_ = _19_ | ~(_16_);
  assign _21_ = A[1] & ~(B[1]);
  assign _22_ = ~(A[1] ^ B[1]);
  assign _23_ = A[0] | ~(B[0]);
  assign _24_ = ~((_23_ & _22_) | _21_);
  assign _25_ = ~((_24_ | _20_) & _18_);
  assign _26_ = ~((_25_ & _14_) | _11_);
  assign result[0] = _26_ ^ _00_;
  assign result[7:1] = 7'h00;
endmodule

module \$paramod\left_shift\N=8 (A, B, result, error);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  wire _11_;
  wire _12_;
  wire _13_;
  wire _14_;
  wire _15_;
  wire _16_;
  wire _17_;
  wire _18_;
  wire _19_;
  wire _20_;
  wire _21_;
  wire _22_;
  wire _23_;
  wire _24_;
  wire _25_;
  wire _26_;
  wire _27_;
  wire _28_;
  wire _29_;
  wire _30_;
  wire _31_;
  wire _32_;
  wire _33_;
  wire _34_;
  wire _35_;
  wire _36_;
  wire _37_;
  wire _38_;
  wire _39_;
  wire _40_;
  wire _41_;
  wire _42_;
  input [7:0] A;
  input [7:0] B;
  output error;
  output [7:0] result;
  assign _00_ = B[5] | B[4];
  assign _01_ = B[7] | B[6];
  assign _02_ = _01_ | _00_;
  assign _03_ = _02_ | ~(A[0]);
  assign _04_ = _03_ | B[0];
  assign _05_ = _04_ | B[1];
  assign _06_ = ~(_05_ | B[2]);
  assign _07_ = _06_ & ~(B[3]);
  assign _08_ = B[3] | B[2];
  assign _09_ = B[1] | B[0];
  assign _10_ = _09_ | _08_;
  assign _11_ = ~(_10_ | _02_);
  assign error = B[7] & ~(_11_);
  assign _12_ = ~error;
  assign result[0] = _12_ & _07_;
  assign _13_ = _02_ | ~(A[1]);
  assign _14_ = B[0] ? _03_ : _13_;
  assign _15_ = _14_ | B[1];
  assign _16_ = _15_ | B[2];
  assign _17_ = _16_ | B[3];
  assign result[1] = _12_ & ~(_17_);
  assign _18_ = _02_ | ~(A[2]);
  assign _19_ = B[0] ? _13_ : _18_;
  assign _20_ = B[1] ? _04_ : _19_;
  assign _21_ = _20_ | B[2];
  assign _22_ = _21_ | B[3];
  assign result[2] = _12_ & ~(_22_);
  assign _23_ = _02_ | ~(A[3]);
  assign _24_ = B[0] ? _18_ : _23_;
  assign _25_ = B[1] ? _14_ : _24_;
  assign _26_ = _25_ | B[2];
  assign _27_ = _26_ | B[3];
  assign result[3] = _12_ & ~(_27_);
  assign _28_ = _02_ | ~(A[4]);
  assign _29_ = B[0] ? _23_ : _28_;
  assign _30_ = B[1] ? _19_ : _29_;
  assign _31_ = B[2] ? _05_ : _30_;
  assign _32_ = _31_ | B[3];
  assign result[4] = _12_ & ~(_32_);
  assign _33_ = _02_ | ~(A[5]);
  assign _34_ = B[0] ? _28_ : _33_;
  assign _35_ = B[1] ? _24_ : _34_;
  assign _36_ = B[2] ? _15_ : _35_;
  assign _37_ = _36_ | B[3];
  assign result[5] = _12_ & ~(_37_);
  assign _38_ = _02_ | ~(A[6]);
  assign _39_ = B[0] ? _33_ : _38_;
  assign _40_ = B[1] ? _29_ : _39_;
  assign _41_ = B[2] ? _20_ : _40_;
  assign _42_ = _41_ | B[3];
  assign result[6] = _12_ & ~(_42_);
  assign result[7] = A[7] & ~(error);
endmodule

module \$paramod\mux_4to1\N=8 (in0, in1, in2, in3, sel, out);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  wire _11_;
  wire _12_;
  wire _13_;
  wire _14_;
  wire _15_;
  wire _16_;
  wire _17_;
  wire _18_;
  wire _19_;
  wire _20_;
  wire _21_;
  wire _22_;
  wire _23_;
  wire _24_;
  wire _25_;
  wire _26_;
  wire _27_;
  input [7:0] in0;
  input [7:0] in1;
  input [7:0] in2;
  input [7:0] in3;
  output [7:0] out;
  input [1:0] sel;
  assign _00_ = ~(sel[1] | sel[0]);
  assign _01_ = sel[1] & ~(sel[0]);
  assign _02_ = sel[1] & sel[0];
  assign _03_ = ~((_02_ & in2[0]) | (_01_ & in3[0]));
  assign _04_ = sel[1] | ~(sel[0]);
  assign _05_ = in1[0] & ~(_04_);
  assign _06_ = _05_ | ~(_03_);
  assign out[0] = _00_ ? in0[0] : _06_;
  assign _07_ = ~((_02_ & in2[1]) | (_01_ & in3[1]));
  assign _08_ = in1[1] & ~(_04_);
  assign _09_ = _08_ | ~(_07_);
  assign out[1] = _00_ ? in0[1] : _09_;
  assign _10_ = ~((_02_ & in2[2]) | (_01_ & in3[2]));
  assign _11_ = in1[2] & ~(_04_);
  assign _12_ = _11_ | ~(_10_);
  assign out[2] = _00_ ? in0[2] : _12_;
  assign _13_ = ~((_02_ & in2[3]) | (_01_ & in3[3]));
  assign _14_ = in1[3] & ~(_04_);
  assign _15_ = _14_ | ~(_13_);
  assign out[3] = _00_ ? in0[3] : _15_;
  assign _16_ = ~((_02_ & in2[4]) | (_01_ & in3[4]));
  assign _17_ = in1[4] & ~(_04_);
  assign _18_ = _17_ | ~(_16_);
  assign out[4] = _00_ ? in0[4] : _18_;
  assign _19_ = ~((_02_ & in2[5]) | (_01_ & in3[5]));
  assign _20_ = in1[5] & ~(_04_);
  assign _21_ = _20_ | ~(_19_);
  assign out[5] = _00_ ? in0[5] : _21_;
  assign _22_ = ~((_02_ & in2[6]) | (_01_ & in3[6]));
  assign _23_ = in1[6] & ~(_04_);
  assign _24_ = _23_ | ~(_22_);
  assign out[6] = _00_ ? in0[6] : _24_;
  assign _25_ = ~((_02_ & in2[7]) | (_01_ & in3[7]));
  assign _26_ = in1[7] & ~(_04_);
  assign _27_ = _26_ | ~(_25_);
  assign out[7] = _00_ ? in0[7] : _27_;
endmodule

module \$paramod\register\N=4 (clk, reset, in, out);
  wire [3:0] _0_;
  input clk;
  input [3:0] in;
  output [3:0] out;
  reg [3:0] out;
  input reset;
  assign _0_[0] = reset & in[0];
  assign _0_[1] = in[1] & reset;
  assign _0_[2] = in[2] & reset;
  assign _0_[3] = in[3] & reset;
  always @(posedge clk)
      out[0] <= _0_[0];
  always @(posedge clk)
      out[1] <= _0_[1];
  always @(posedge clk)
      out[2] <= _0_[2];
  always @(posedge clk)
      out[3] <= _0_[3];
endmodule

module \$paramod\register\N=8 (clk, reset, in, out);
  wire [7:0] _00_;
  input clk;
  input [7:0] in;
  output [7:0] out;
  reg [7:0] out;
  input reset;
  assign _00_[0] = reset & in[0];
  assign _00_[1] = in[1] & reset;
  assign _00_[2] = in[2] & reset;
  assign _00_[3] = in[3] & reset;
  assign _00_[4] = in[4] & reset;
  assign _00_[5] = in[5] & reset;
  assign _00_[6] = in[6] & reset;
  assign _00_[7] = in[7] & reset;
  always @(posedge clk)
      out[0] <= _00_[0];
  always @(posedge clk)
      out[1] <= _00_[1];
  always @(posedge clk)
      out[2] <= _00_[2];
  always @(posedge clk)
      out[3] <= _00_[3];
  always @(posedge clk)
      out[4] <= _00_[4];
  always @(posedge clk)
      out[5] <= _00_[5];
  always @(posedge clk)
      out[6] <= _00_[6];
  always @(posedge clk)
      out[7] <= _00_[7];
endmodule

module \$paramod\u2_to_sm\N=8 (u2_number, sm_number, error);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  wire _11_;
  wire _12_;
  wire _13_;
  wire _14_;
  wire _15_;
  wire _16_;
  output error;
  output [7:0] sm_number;
  input [7:0] u2_number;
  assign _00_ = u2_number[0] & ~(u2_number[7]);
  assign _01_ = u2_number[7] & u2_number[0];
  assign sm_number[0] = _01_ | _00_;
  assign _02_ = ~u2_number[7];
  assign _03_ = u2_number[1] ^ u2_number[0];
  assign sm_number[1] = u2_number[7] ? _03_ : u2_number[1];
  assign _04_ = u2_number[1] | u2_number[0];
  assign _05_ = _04_ ^ u2_number[2];
  assign sm_number[2] = u2_number[7] ? _05_ : u2_number[2];
  assign _06_ = _04_ | u2_number[2];
  assign _07_ = _06_ ^ u2_number[3];
  assign sm_number[3] = u2_number[7] ? _07_ : u2_number[3];
  assign _08_ = u2_number[3] | u2_number[2];
  assign _09_ = _08_ | _04_;
  assign _10_ = _09_ ^ u2_number[4];
  assign sm_number[4] = u2_number[7] ? _10_ : u2_number[4];
  assign _11_ = _09_ | u2_number[4];
  assign _12_ = _11_ ^ u2_number[5];
  assign sm_number[5] = u2_number[7] ? _12_ : u2_number[5];
  assign _13_ = u2_number[5] | u2_number[4];
  assign _14_ = _13_ | _09_;
  assign _15_ = _14_ ^ u2_number[6];
  assign sm_number[6] = u2_number[7] ? _15_ : u2_number[6];
  assign _16_ = _14_ | u2_number[6];
  assign sm_number[7] = _16_ & ~(_02_);
  assign error = u2_number[7] & ~(_16_);
endmodule

module bit_change(A, B, result, error);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  wire _11_;
  wire _12_;
  wire _13_;
  wire _14_;
  wire _15_;
  wire _16_;
  wire _17_;
  wire _18_;
  wire _19_;
  wire _20_;
  wire _21_;
  wire _22_;
  wire _23_;
  wire _24_;
  wire _25_;
  wire _26_;
  wire _27_;
  wire _28_;
  wire _29_;
  wire _30_;
  wire _31_;
  wire _32_;
  wire _33_;
  wire _34_;
  wire _35_;
  wire _36_;
  wire _37_;
  wire _38_;
  input [7:0] A;
  input [7:0] B;
  output error;
  output [7:0] result;
  assign _00_ = B[7] | B[6];
  assign _01_ = B[5] | B[4];
  assign _02_ = _01_ | _00_;
  assign _03_ = B[2] | ~(B[3]);
  assign _04_ = B[1] | B[0];
  assign _05_ = _04_ | _03_;
  assign _06_ = ~((_05_ & B[3]) | _02_);
  assign error = ~((_05_ | _02_) & _06_);
  assign _07_ = ~A[0];
  assign _08_ = _02_ | B[0];
  assign _09_ = _08_ | B[1];
  assign _10_ = _09_ | B[2];
  assign _11_ = _10_ | B[3];
  assign result[0] = ~((_11_ | error) & _07_);
  assign _12_ = ~A[1];
  assign _13_ = _02_ | ~(B[0]);
  assign _14_ = _13_ | B[1];
  assign _15_ = _14_ | B[2];
  assign _16_ = _15_ | B[3];
  assign result[1] = ~((_16_ | error) & _12_);
  assign _17_ = ~A[2];
  assign _18_ = ~B[1];
  assign _19_ = _08_ | _18_;
  assign _20_ = _19_ | B[2];
  assign _21_ = _20_ | B[3];
  assign result[2] = ~((_21_ | error) & _17_);
  assign _22_ = ~A[3];
  assign _23_ = _13_ | _18_;
  assign _24_ = _23_ | B[2];
  assign _25_ = _24_ | B[3];
  assign result[3] = ~((_25_ | error) & _22_);
  assign _26_ = ~A[4];
  assign _27_ = ~B[2];
  assign _28_ = _09_ | _27_;
  assign _29_ = _28_ | B[3];
  assign result[4] = ~((_29_ | error) & _26_);
  assign _30_ = ~A[5];
  assign _31_ = _14_ | _27_;
  assign _32_ = _31_ | B[3];
  assign result[5] = ~((_32_ | error) & _30_);
  assign _33_ = ~A[6];
  assign _34_ = _19_ | _27_;
  assign _35_ = _34_ | B[3];
  assign result[6] = ~((_35_ | error) & _33_);
  assign _36_ = ~A[7];
  assign _37_ = _23_ | _27_;
  assign _38_ = _37_ | B[3];
  assign result[7] = ~((_38_ | error) & _36_);
endmodule

module compare(A, B, result);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  wire _11_;
  wire _12_;
  wire _13_;
  wire _14_;
  wire _15_;
  wire _16_;
  wire _17_;
  wire _18_;
  wire _19_;
  wire _20_;
  wire _21_;
  wire _22_;
  wire _23_;
  wire _24_;
  wire _25_;
  wire _26_;
  input [7:0] A;
  input [7:0] B;
  output [7:0] result;
  assign _00_ = A[7] ^ B[7];
  assign _01_ = A[7] & ~(B[7]);
  assign _02_ = ~(A[7] ^ B[7]);
  assign _03_ = A[6] & ~(B[6]);
  assign _04_ = ~((_03_ & _02_) | _01_);
  assign _05_ = A[6] ^ B[6];
  assign _06_ = _05_ | _00_;
  assign _07_ = A[5] & ~(B[5]);
  assign _08_ = ~(A[5] ^ B[5]);
  assign _09_ = A[4] & ~(B[4]);
  assign _10_ = ~((_09_ & _08_) | _07_);
  assign _11_ = ~((_10_ | _06_) & _04_);
  assign _12_ = ~(A[4] ^ B[4]);
  assign _13_ = ~(_12_ & _08_);
  assign _14_ = ~(_13_ | _06_);
  assign _15_ = A[3] & ~(B[3]);
  assign _16_ = ~(A[3] ^ B[3]);
  assign _17_ = A[2] & ~(B[2]);
  assign _18_ = ~((_17_ & _16_) | _15_);
  assign _19_ = A[2] ^ B[2];
  assign _20_ = _19_ | ~(_16_);
  assign _21_ = A[1] & ~(B[1]);
  assign _22_ = ~(A[1] ^ B[1]);
  assign _23_ = A[0] | ~(B[0]);
  assign _24_ = ~((_23_ & _22_) | _21_);
  assign _25_ = ~((_24_ | _20_) & _18_);
  assign _26_ = ~((_25_ & _14_) | _11_);
  assign result[0] = _26_ ^ _00_;
  assign result[7:1] = 7'h00;
endmodule

module exe_unit_w26(i_oper, i_argA, i_argB, i_clk, i_rsn, o_result, o_status);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  wire _11_;
  wire [31:0] count;
  wire err_bit_change;
  wire err_conversion;
  wire err_left_shift;
  wire [31:0] i;
  input [7:0] i_argA;
  input [7:0] i_argB;
  input i_clk;
  input [1:0] i_oper;
  input i_rsn;
  wire [3:0] info;
  output [7:0] o_result;
  output [3:0] o_status;
  wire [7:0] out_bit_change;
  wire [7:0] out_compare;
  wire [7:0] out_conversion;
  wire [7:0] out_mux;
  wire [7:0] out_shift;
  assign _00_ = ~(o_result[1] ^ o_result[0]);
  assign _01_ = _00_ ^ o_result[2];
  assign _02_ = _01_ ^ o_result[3];
  assign _03_ = _02_ ^ o_result[4];
  assign _04_ = _03_ ^ o_result[5];
  assign _05_ = _04_ ^ o_result[6];
  assign info[1] = _05_ ^ o_result[7];
  assign _06_ = o_result[1] & o_result[0];
  assign _07_ = ~(o_result[2] & o_result[3]);
  assign _08_ = _06_ & ~(_07_);
  assign _09_ = ~(o_result[5] & o_result[4]);
  assign _10_ = ~(o_result[6] & o_result[7]);
  assign _11_ = _10_ | _09_;
  assign info[2] = _08_ & ~(_11_);
  assign info[0] = err_bit_change | err_left_shift;
  \$paramod\bit_change\N=8  bit_change (
    .A(i_argA),
    .B(i_argB),
    .error(err_bit_change),
    .result(out_bit_change)
  );
  \$paramod\compare\N=8  compare (
    .A(i_argA),
    .B(i_argB),
    .result(out_compare)
  );
  \$paramod\u2_to_sm\N=8  conversion (
    .error(err_conversion),
    .sm_number(out_conversion),
    .u2_number(i_argA)
  );
  \$paramod\mux_4to1\N=8  mux (
    .in0(out_conversion),
    .in1(out_shift),
    .in2(out_bit_change),
    .in3(out_compare),
    .out(out_mux),
    .sel(i_oper)
  );
  \$paramod\register\N=8  register (
    .clk(i_clk),
    .in(out_mux),
    .out(o_result),
    .reset(i_rsn)
  );
  \$paramod\left_shift\N=8  shift (
    .A(i_argA),
    .B(i_argB),
    .error(err_left_shift),
    .result(out_shift)
  );
  \$paramod\register\N=4  status_register (
    .clk(i_clk),
    .in({ err_conversion, info[2:0] }),
    .out(o_status),
    .reset(i_rsn)
  );
  assign count[31:8] = 24'h000000;
  assign i = 32'd8;
  assign info[3] = err_conversion;
endmodule

module left_shift(A, B, result, error);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  wire _11_;
  wire _12_;
  wire _13_;
  wire _14_;
  wire _15_;
  wire _16_;
  wire _17_;
  wire _18_;
  wire _19_;
  wire _20_;
  wire _21_;
  wire _22_;
  wire _23_;
  wire _24_;
  wire _25_;
  wire _26_;
  wire _27_;
  wire _28_;
  wire _29_;
  wire _30_;
  wire _31_;
  wire _32_;
  wire _33_;
  wire _34_;
  wire _35_;
  wire _36_;
  wire _37_;
  wire _38_;
  wire _39_;
  wire _40_;
  wire _41_;
  wire _42_;
  input [7:0] A;
  input [7:0] B;
  output error;
  output [7:0] result;
  assign _00_ = B[5] | B[4];
  assign _01_ = B[7] | B[6];
  assign _02_ = _01_ | _00_;
  assign _03_ = _02_ | ~(A[0]);
  assign _04_ = _03_ | B[0];
  assign _05_ = _04_ | B[1];
  assign _06_ = ~(_05_ | B[2]);
  assign _07_ = _06_ & ~(B[3]);
  assign _08_ = B[3] | B[2];
  assign _09_ = B[1] | B[0];
  assign _10_ = _09_ | _08_;
  assign _11_ = ~(_10_ | _02_);
  assign error = B[7] & ~(_11_);
  assign _12_ = ~error;
  assign result[0] = _12_ & _07_;
  assign _13_ = _02_ | ~(A[1]);
  assign _14_ = B[0] ? _03_ : _13_;
  assign _15_ = _14_ | B[1];
  assign _16_ = _15_ | B[2];
  assign _17_ = _16_ | B[3];
  assign result[1] = _12_ & ~(_17_);
  assign _18_ = _02_ | ~(A[2]);
  assign _19_ = B[0] ? _13_ : _18_;
  assign _20_ = B[1] ? _04_ : _19_;
  assign _21_ = _20_ | B[2];
  assign _22_ = _21_ | B[3];
  assign result[2] = _12_ & ~(_22_);
  assign _23_ = _02_ | ~(A[3]);
  assign _24_ = B[0] ? _18_ : _23_;
  assign _25_ = B[1] ? _14_ : _24_;
  assign _26_ = _25_ | B[2];
  assign _27_ = _26_ | B[3];
  assign result[3] = _12_ & ~(_27_);
  assign _28_ = _02_ | ~(A[4]);
  assign _29_ = B[0] ? _23_ : _28_;
  assign _30_ = B[1] ? _19_ : _29_;
  assign _31_ = B[2] ? _05_ : _30_;
  assign _32_ = _31_ | B[3];
  assign result[4] = _12_ & ~(_32_);
  assign _33_ = _02_ | ~(A[5]);
  assign _34_ = B[0] ? _28_ : _33_;
  assign _35_ = B[1] ? _24_ : _34_;
  assign _36_ = B[2] ? _15_ : _35_;
  assign _37_ = _36_ | B[3];
  assign result[5] = _12_ & ~(_37_);
  assign _38_ = _02_ | ~(A[6]);
  assign _39_ = B[0] ? _33_ : _38_;
  assign _40_ = B[1] ? _29_ : _39_;
  assign _41_ = B[2] ? _20_ : _40_;
  assign _42_ = _41_ | B[3];
  assign result[6] = _12_ & ~(_42_);
  assign result[7] = A[7] & ~(error);
endmodule

module mux_4to1(in0, in1, in2, in3, sel, out);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  wire _11_;
  wire _12_;
  wire _13_;
  wire _14_;
  wire _15_;
  wire _16_;
  wire _17_;
  wire _18_;
  wire _19_;
  wire _20_;
  wire _21_;
  wire _22_;
  wire _23_;
  wire _24_;
  wire _25_;
  wire _26_;
  wire _27_;
  input [7:0] in0;
  input [7:0] in1;
  input [7:0] in2;
  input [7:0] in3;
  output [7:0] out;
  input [1:0] sel;
  assign _00_ = ~(sel[1] | sel[0]);
  assign _01_ = sel[1] & ~(sel[0]);
  assign _02_ = sel[1] & sel[0];
  assign _03_ = ~((_02_ & in2[0]) | (_01_ & in3[0]));
  assign _04_ = sel[1] | ~(sel[0]);
  assign _05_ = in1[0] & ~(_04_);
  assign _06_ = _05_ | ~(_03_);
  assign out[0] = _00_ ? in0[0] : _06_;
  assign _07_ = ~((_02_ & in2[1]) | (_01_ & in3[1]));
  assign _08_ = in1[1] & ~(_04_);
  assign _09_ = _08_ | ~(_07_);
  assign out[1] = _00_ ? in0[1] : _09_;
  assign _10_ = ~((_02_ & in2[2]) | (_01_ & in3[2]));
  assign _11_ = in1[2] & ~(_04_);
  assign _12_ = _11_ | ~(_10_);
  assign out[2] = _00_ ? in0[2] : _12_;
  assign _13_ = ~((_02_ & in2[3]) | (_01_ & in3[3]));
  assign _14_ = in1[3] & ~(_04_);
  assign _15_ = _14_ | ~(_13_);
  assign out[3] = _00_ ? in0[3] : _15_;
  assign _16_ = ~((_02_ & in2[4]) | (_01_ & in3[4]));
  assign _17_ = in1[4] & ~(_04_);
  assign _18_ = _17_ | ~(_16_);
  assign out[4] = _00_ ? in0[4] : _18_;
  assign _19_ = ~((_02_ & in2[5]) | (_01_ & in3[5]));
  assign _20_ = in1[5] & ~(_04_);
  assign _21_ = _20_ | ~(_19_);
  assign out[5] = _00_ ? in0[5] : _21_;
  assign _22_ = ~((_02_ & in2[6]) | (_01_ & in3[6]));
  assign _23_ = in1[6] & ~(_04_);
  assign _24_ = _23_ | ~(_22_);
  assign out[6] = _00_ ? in0[6] : _24_;
  assign _25_ = ~((_02_ & in2[7]) | (_01_ & in3[7]));
  assign _26_ = in1[7] & ~(_04_);
  assign _27_ = _26_ | ~(_25_);
  assign out[7] = _00_ ? in0[7] : _27_;
endmodule

module register(clk, reset, in, out);
  wire [7:0] _00_;
  input clk;
  input [7:0] in;
  output [7:0] out;
  reg [7:0] out;
  input reset;
  assign _00_[0] = reset & in[0];
  assign _00_[1] = in[1] & reset;
  assign _00_[2] = in[2] & reset;
  assign _00_[3] = in[3] & reset;
  assign _00_[4] = in[4] & reset;
  assign _00_[5] = in[5] & reset;
  assign _00_[6] = in[6] & reset;
  assign _00_[7] = in[7] & reset;
  always @(posedge clk)
      out[0] <= _00_[0];
  always @(posedge clk)
      out[1] <= _00_[1];
  always @(posedge clk)
      out[2] <= _00_[2];
  always @(posedge clk)
      out[3] <= _00_[3];
  always @(posedge clk)
      out[4] <= _00_[4];
  always @(posedge clk)
      out[5] <= _00_[5];
  always @(posedge clk)
      out[6] <= _00_[6];
  always @(posedge clk)
      out[7] <= _00_[7];
endmodule

module u2_to_sm(u2_number, sm_number, error);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  wire _11_;
  wire _12_;
  wire _13_;
  wire _14_;
  wire _15_;
  wire _16_;
  output error;
  output [7:0] sm_number;
  input [7:0] u2_number;
  assign _00_ = u2_number[0] & ~(u2_number[7]);
  assign _01_ = u2_number[7] & u2_number[0];
  assign sm_number[0] = _01_ | _00_;
  assign _02_ = ~u2_number[7];
  assign _03_ = u2_number[1] ^ u2_number[0];
  assign sm_number[1] = u2_number[7] ? _03_ : u2_number[1];
  assign _04_ = u2_number[1] | u2_number[0];
  assign _05_ = _04_ ^ u2_number[2];
  assign sm_number[2] = u2_number[7] ? _05_ : u2_number[2];
  assign _06_ = _04_ | u2_number[2];
  assign _07_ = _06_ ^ u2_number[3];
  assign sm_number[3] = u2_number[7] ? _07_ : u2_number[3];
  assign _08_ = u2_number[3] | u2_number[2];
  assign _09_ = _08_ | _04_;
  assign _10_ = _09_ ^ u2_number[4];
  assign sm_number[4] = u2_number[7] ? _10_ : u2_number[4];
  assign _11_ = _09_ | u2_number[4];
  assign _12_ = _11_ ^ u2_number[5];
  assign sm_number[5] = u2_number[7] ? _12_ : u2_number[5];
  assign _13_ = u2_number[5] | u2_number[4];
  assign _14_ = _13_ | _09_;
  assign _15_ = _14_ ^ u2_number[6];
  assign sm_number[6] = u2_number[7] ? _15_ : u2_number[6];
  assign _16_ = _14_ | u2_number[6];
  assign sm_number[7] = _16_ & ~(_02_);
  assign error = u2_number[7] & ~(_16_);
endmodule

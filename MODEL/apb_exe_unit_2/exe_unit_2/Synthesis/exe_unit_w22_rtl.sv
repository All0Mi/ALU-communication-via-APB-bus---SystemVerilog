/* Generated by Yosys 0.9 (git sha1 1979e0b) */

module \$paramod\changebit\BITS=4 (i_argA, i_argB, o_result, error);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  wire _11_;
  wire _12_;
  output error;
  input [3:0] i_argA;
  input [3:0] i_argB;
  output [3:0] o_result;
  assign _00_ = ~i_argB[3];
  assign _01_ = ~i_argB[2];
  assign error = i_argB[3] | i_argB[2];
  assign _02_ = i_argB[3] | i_argB[0];
  assign _03_ = ~_02_;
  assign _04_ = i_argB[2] | i_argB[1];
  assign _05_ = ~_04_;
  assign _06_ = _02_ | _04_;
  assign _07_ = ~_06_;
  assign o_result[0] = i_argA[0] | _07_;
  assign _08_ = _00_ & i_argB[0];
  assign _09_ = _05_ & _08_;
  assign o_result[1] = i_argA[1] | _09_;
  assign _10_ = _01_ & i_argB[1];
  assign _11_ = _03_ & _10_;
  assign o_result[2] = i_argA[2] | _11_;
  assign _12_ = _08_ & _10_;
  assign o_result[3] = i_argA[3] | _12_;
endmodule

module \$paramod\changecode\BITS=4 (i_argA, o_result, error);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  output error;
  input [3:0] i_argA;
  output [3:0] o_result;
  assign _00_ = ~i_argA[2];
  assign _01_ = ~i_argA[3];
  assign _02_ = i_argA[1] | i_argA[0];
  assign _03_ = ~_02_;
  assign _04_ = _00_ & i_argA[3];
  assign error = _03_ & _04_;
  assign _05_ = i_argA[1] & i_argA[0];
  assign _06_ = ~_05_;
  assign _07_ = i_argA[3] & _02_;
  assign _08_ = _06_ & _07_;
  assign _09_ = i_argA[1] & _01_;
  assign o_result[1] = _08_ | _09_;
  assign o_result[2] = i_argA[2] ^ _07_;
  assign { o_result[3], o_result[0] } = { i_argA[3], i_argA[0] };
endmodule

module \$paramod\comparison\BITS=4 (i_argA, i_argB, o_result);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  wire _11_;
  wire _12_;
  wire _13_;
  wire _14_;
  wire _15_;
  input [3:0] i_argA;
  input [3:0] i_argB;
  output [3:0] o_result;
  assign _00_ = ~i_argA[3];
  assign _01_ = ~i_argB[2];
  assign _02_ = ~i_argB[1];
  assign _03_ = ~i_argB[0];
  assign _04_ = _00_ & i_argB[3];
  assign _05_ = i_argA[1] | _02_;
  assign _06_ = i_argA[0] | _03_;
  assign _07_ = _05_ & _06_;
  assign _08_ = i_argA[2] & _01_;
  assign _09_ = i_argA[1] & _02_;
  assign _10_ = _08_ | _09_;
  assign _11_ = _07_ | _10_;
  assign _12_ = _00_ | i_argB[3];
  assign _13_ = i_argA[2] | _01_;
  assign _14_ = _12_ & _13_;
  assign _15_ = _11_ & _14_;
  assign o_result[0] = _04_ | _15_;
  assign o_result[3:1] = 3'h0;
endmodule

module \$paramod\negation\BITS=4 (i_argA, o_result, error);
  wire _0_;
  wire _1_;
  wire _2_;
  output error;
  input [3:0] i_argA;
  output [3:0] o_result;
  assign _0_ = i_argA[1] | i_argA[0];
  assign _1_ = i_argA[2] | _0_;
  assign _2_ = ~_1_;
  assign error = i_argA[3] & _2_;
  assign o_result[1] = i_argA[1] ^ i_argA[0];
  assign o_result[2] = i_argA[2] ^ _0_;
  assign o_result[3] = i_argA[3] ^ _1_;
  assign o_result[0] = i_argA[0];
endmodule

module ALU_rtl(i_argA, i_argB, i_oper, i_clk, i_rsn, o_result, o_status);
  wire _000_;
  wire [3:0] _001_;
  wire [3:0] _002_;
  wire _003_;
  wire _004_;
  wire _005_;
  wire _006_;
  wire _007_;
  wire _008_;
  wire _009_;
  wire _010_;
  wire _011_;
  wire _012_;
  wire _013_;
  wire _014_;
  wire _015_;
  wire _016_;
  wire _017_;
  wire _018_;
  wire _019_;
  wire _020_;
  wire _021_;
  wire _022_;
  wire _023_;
  wire _024_;
  wire _025_;
  wire _026_;
  wire _027_;
  wire _028_;
  wire _029_;
  wire _030_;
  wire _031_;
  wire _032_;
  wire _033_;
  wire _034_;
  wire _035_;
  wire _036_;
  wire _037_;
  wire _038_;
  wire _039_;
  wire _040_;
  wire _041_;
  wire _042_;
  wire _043_;
  wire _044_;
  wire _045_;
  wire _046_;
  wire _047_;
  wire _048_;
  wire _049_;
  wire _050_;
  wire _051_;
  wire _052_;
  wire _053_;
  wire _054_;
  wire _055_;
  wire error_0;
  wire error_2;
  wire error_3;
  input [3:0] i_argA;
  input [3:0] i_argB;
  input i_clk;
  input [1:0] i_oper;
  input i_rsn;
  output [3:0] o_result;
  reg [3:0] o_result;
  wire [3:0] o_result_0;
  wire [3:0] o_result_1;
  wire [3:0] o_result_2;
  wire [3:0] o_result_3;
  output [3:0] o_status;
  reg [3:0] o_status;
  assign _003_ = ~i_oper[1];
  assign _004_ = ~i_oper[0];
  assign _005_ = ~o_result_2[1];
  assign _006_ = ~o_result_1[1];
  assign _007_ = i_oper[1] & i_oper[0];
  assign _008_ = o_result_3[0] & _007_;
  assign _009_ = _003_ & _004_;
  assign _010_ = i_oper[1] | i_oper[0];
  assign _011_ = o_result_0[0] & _009_;
  assign _012_ = _008_ | _011_;
  assign _013_ = ~_012_;
  assign _014_ = _003_ & i_oper[0];
  assign _015_ = o_result_1[0] & _014_;
  assign _016_ = i_oper[1] & _004_;
  assign _017_ = o_result_2[0] & _016_;
  assign _018_ = _015_ | _017_;
  assign _019_ = ~_018_;
  assign _020_ = _013_ & _019_;
  assign _001_[0] = ~_020_;
  assign _021_ = o_result_3[1] & _007_;
  assign _022_ = ~_021_;
  assign _023_ = i_oper[1] | _006_;
  assign _024_ = o_result_0[1] | _010_;
  assign _025_ = ~_024_;
  assign _026_ = i_oper[1] & _005_;
  assign _027_ = i_oper[0] | _026_;
  assign _028_ = _023_ & _027_;
  assign _029_ = _022_ & _028_;
  assign _030_ = _025_ | _029_;
  assign _001_[1] = ~_030_;
  assign _031_ = o_result_2[2] & _016_;
  assign _032_ = o_result_0[2] & _009_;
  assign _033_ = _031_ | _032_;
  assign _034_ = ~_033_;
  assign _035_ = o_result_3[2] & _007_;
  assign _036_ = o_result_1[2] & _014_;
  assign _037_ = _035_ | _036_;
  assign _038_ = ~_037_;
  assign _039_ = _034_ & _038_;
  assign _001_[2] = ~_039_;
  assign _040_ = o_result_0[3] & _009_;
  assign _041_ = o_result_2[3] & _016_;
  assign _042_ = _040_ | _041_;
  assign _043_ = ~_042_;
  assign _044_ = o_result_1[3] & _014_;
  assign _045_ = o_result_3[3] & _007_;
  assign _046_ = _044_ | _045_;
  assign _047_ = ~_046_;
  assign _048_ = _043_ & _047_;
  assign _001_[3] = ~_048_;
  assign _049_ = _020_ & _030_;
  assign _050_ = _039_ & _048_;
  assign _002_[0] = _049_ & _050_;
  assign _051_ = error_3 & _007_;
  assign _052_ = error_0 & _009_;
  assign _002_[2] = _051_ | _052_;
  assign _053_ = error_2 & _016_;
  assign _000_ = _002_[2] | _053_;
  assign _054_ = _020_ ^ _030_;
  assign _055_ = _039_ ^ _048_;
  assign _002_[1] = _054_ ^ _055_;
  always @(posedge i_clk or negedge i_rsn)
    if (!i_rsn)
      o_result[0] <= 0;
    else
      o_result[0] <= _001_[0];
  always @(posedge i_clk or negedge i_rsn)
    if (!i_rsn)
      o_result[1] <= 0;
    else
      o_result[1] <= _001_[1];
  always @(posedge i_clk or negedge i_rsn)
    if (!i_rsn)
      o_result[2] <= 0;
    else
      o_result[2] <= _001_[2];
  always @(posedge i_clk or negedge i_rsn)
    if (!i_rsn)
      o_result[3] <= 0;
    else
      o_result[3] <= _001_[3];
  always @(posedge i_clk or negedge i_rsn)
    if (!i_rsn)
      o_status[0] <= 0;
    else
      o_status[0] <= _002_[0];
  always @(posedge i_clk or negedge i_rsn)
    if (!i_rsn)
      o_status[1] <= 0;
    else
      o_status[1] <= _002_[1];
  always @(posedge i_clk or negedge i_rsn)
    if (!i_rsn)
      o_status[2] <= 0;
    else
      o_status[2] <= _002_[2];
  always @(posedge i_clk or negedge i_rsn)
    if (!i_rsn)
      o_status[3] <= 0;
    else
      o_status[3] <= _000_;
  \$paramod\changebit\BITS=4  changebit (
    .error(error_2),
    .i_argA(i_argA),
    .i_argB(i_argB),
    .o_result(o_result_2)
  );
  \$paramod\changecode\BITS=4  changecode (
    .error(error_3),
    .i_argA(i_argA),
    .o_result(o_result_3)
  );
  \$paramod\comparison\BITS=4  comparison (
    .i_argA(i_argA),
    .i_argB(i_argB),
    .o_result(o_result_1)
  );
  \$paramod\negation\BITS=4  negation (
    .error(error_0),
    .i_argA(i_argA),
    .o_result(o_result_0)
  );
  assign _002_[3] = _000_;
endmodule
